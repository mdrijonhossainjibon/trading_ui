import React, { FC, useEffect, useRef, useState } from 'react'
import { Button, Space, Toast } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { UploadOutline } from 'antd-mobile-icons'
import type { ToastHandler } from 'antd-mobile/es/components/toast'

export default () => {
  const handler = useRef<ToastHandler>()

  return (
    <>
      <DemoBlock title='基础用法'>
        <Button
          onClick={() =>
            Toast.show({
              content: 'Hello World',
              afterClose: () => {
                console.log('after')
              },
            })
          }
        >
          轻提示
        </Button>
      </DemoBlock>

      <DemoBlock title='图标'>
        <Space wrap>
          <Button
            onClick={() =>
              Toast.show({
                icon: 'success',
                content: '保存成功',
              })
            }
          >
            成功
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                icon: 'fail',
                content: '名称已存在',
              })
            }}
          >
            失败
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                icon: 'loading',
                content: '加载中…',
              })
            }}
          >
            加载中
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                content: '上传中',
                icon: <UploadOutline />,
              })
            }}
          >
            自定义图标
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='更多功能'>
        <Space wrap>
          <Button
            block
            onClick={() => {
              Toast.show({
                content: 'Hello World',
                position: 'top',
              })
            }}
          >
            顶部提示
          </Button>
          <Button
            block
            onClick={() => {
              Toast.show({
                content: 'Hello World',
                position: 'bottom',
              })
            }}
          >
            底部提示
          </Button>
          <Button
            block
            onClick={() => {
              Toast.show({
                content: '请耐心等待, 不要退出',
                maskClickable: false,
              })
            }}
          >
            阻止背景点击
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                icon: 'loading',
                content: <CountDownText />,
                duration: 5000,
              })
            }}
          >
            动态内容
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='手动清除'>
        <Space wrap>
          <Button
            block
            onClick={() => {
              handler.current = Toast.show({
                content: '这条提示不会自动消失',
                duration: 0,
                position: 'top',
              })
            }}
          >
            显示
          </Button>
          <Button
            block
            onClick={() => {
              Toast.clear()
            }}
          >
            清除
          </Button>
          <Button
            block
            onClick={() => {
              handler.current?.close()
            }}
          >
            关闭
          </Button>
        </Space>
      </DemoBlock>
    </>
  )
}

const CountDownText: FC = () => {
  const [count, setCount] = useState(5)
  useEffect(() => {
    const interval = window.setInterval(() => {
      setCount(x => {
        if (x > 1) {
          return x - 1
        } else {
          return x
        }
      })
    }, 1000)
    return () => {
      window.clearInterval(interval)
    }
  }, [])
  return <span>还剩 {count} 秒</span>
}





















import React from 'react'
import { AutoCenter } from 'antd-mobile'
import { DemoBlock, lorem } from 'demos'

const shortText = lorem.generateWords(3)
const longText = lorem.generateParagraphs(2)

export default () => {
  return (
    <>
      <DemoBlock title='内容不够整行宽度时自动居中'>
        <AutoCenter>{shortText}</AutoCenter>
      </DemoBlock>

      <DemoBlock title='内容达到满宽后保持正常的左对齐'>
        <AutoCenter>{longText}</AutoCenter>
      </DemoBlock>
    </>
  )
}

















import React from 'react'
import { Divider } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础分割线'>
        <Divider />
      </DemoBlock>

      <DemoBlock title='带内容的分割线'>
        <Divider>默认内容在中间</Divider>
        <Divider contentPosition='left'>左侧内容</Divider>
        <Divider contentPosition='right'>右侧内容</Divider>
      </DemoBlock>

      <DemoBlock title='自定义样式'>
        <Divider
          style={{
            color: '#1677ff',
            borderColor: '#1677ff',
            borderStyle: 'dashed',
          }}
        >
          自定义样式
        </Divider>
      </DemoBlock>
      <DemoBlock title='竖向分割线'>
        <>
          Text
          <Divider direction='vertical' />
          <a href='#'>Link</a>
          <Divider direction='vertical' />
          <a href='#'>Link</a>
        </>
      </DemoBlock>
    </>
  )
}












import React from 'react'
import { Grid } from 'antd-mobile'
import { DemoBlock } from 'demos'

import styles from './demo1.less'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Grid columns={3} gap={8}>
          <Grid.Item>
            <div className={styles['grid-demo-item-block']}>A</div>
          </Grid.Item>
          <Grid.Item>
            <div className={styles['grid-demo-item-block']}>B</div>
          </Grid.Item>
          <Grid.Item>
            <div className={styles['grid-demo-item-block']}>C</div>
          </Grid.Item>
          <Grid.Item>
            <div className={styles['grid-demo-item-block']}>D</div>
          </Grid.Item>
          <Grid.Item>
            <div className={styles['grid-demo-item-block']}>E</div>
          </Grid.Item>
        </Grid>
      </DemoBlock>

      <DemoBlock title='控制格子的跨度'>
        <Grid columns={3} gap={8}>
          <Grid.Item>
            <div className={styles['grid-demo-item-block']}>A</div>
          </Grid.Item>
          <Grid.Item span={2}>
            <div className={styles['grid-demo-item-block']}>B</div>
          </Grid.Item>
          <Grid.Item span={2}>
            <div className={styles['grid-demo-item-block']}>C</div>
          </Grid.Item>
          <Grid.Item>
            <div className={styles['grid-demo-item-block']}>D</div>
          </Grid.Item>
          <Grid.Item span={3}>
            <div className={styles['grid-demo-item-block']}>E</div>
          </Grid.Item>
        </Grid>
      </DemoBlock>
    </>
  )
}














import React from 'react'
import { SafeArea } from 'antd-mobile'
import { lorem } from 'demos'

export default () => {
  return (
    <div>
      <div style={{ background: '#ace0ff' }}>
        <SafeArea position='top' />
      </div>
      <div>{lorem.generateParagraphs(10)}</div>
      <div style={{ background: '#ffcfac' }}>
        <SafeArea position='bottom' />
      </div>
    </div>
  )
}













import React from 'react'
import { Space, Button } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='水平方向的间距'>
        <Space>
          <Button>按钮1</Button>
          <Button>按钮2</Button>
          <Button>按钮3</Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='换行'>
        <Space wrap>
          <Button>按钮1</Button>
          <Button>按钮2</Button>
          <Button>按钮3</Button>
          <Button>按钮4</Button>
          <Button>按钮5</Button>
          <Button>按钮6</Button>
          <Button>按钮7</Button>
          <Button>按钮8</Button>
          <Button>按钮9</Button>
          <Button>按钮10</Button>
          <Button>按钮11</Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='垂直方向的间距'>
        <Space direction='vertical'>
          <Button>按钮1</Button>
          <Button>按钮2</Button>
          <Button>按钮3</Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='自定义间距大小'>
        <Space style={{ '--gap': '24px' }}>
          <Button>按钮1</Button>
          <Button>按钮2</Button>
          <Button>按钮3</Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='渲染为块级元素'>
        <Space direction='vertical' block>
          <Button>按钮1</Button>
          <Button>按钮2</Button>
          <Button>按钮3</Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='主轴对齐方式'>
        <Space justify='center' block>
          <Button>1</Button>
          <Button>
            2<br />2
          </Button>
          <Button>
            3<br />3<br />3
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='交叉轴对齐方式'>
        <Space align='end'>
          <Button>1</Button>
          <Button>
            2<br />2
          </Button>
          <Button>
            3<br />3<br />3
          </Button>
        </Space>
      </DemoBlock>
    </>
  )
}
















import React from 'react'
import { CapsuleTabs } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <CapsuleTabs>
          <CapsuleTabs.Tab title='水果' key='fruits'>
            菠萝
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='蔬菜' key='vegetables'>
            西红柿
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='动物' key='animals'>
            蚂蚁
          </CapsuleTabs.Tab>
        </CapsuleTabs>
      </DemoBlock>

      <DemoBlock title='超长自动滑动' padding='0'>
        <CapsuleTabs defaultActiveKey='1'>
          <CapsuleTabs.Tab title='Espresso' key='1'>
            1
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Coffee Latte' key='2'>
            2
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Cappuccino' key='3'>
            3
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Americano' key='4'>
            4
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Flat White' key='5'>
            5
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Caramel Macchiato' key='6'>
            6
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Cafe Mocha' key='7'>
            7
          </CapsuleTabs.Tab>
        </CapsuleTabs>
      </DemoBlock>

      <DemoBlock title='没有内容区' padding='0'>
        <CapsuleTabs>
          <CapsuleTabs.Tab title='水果' key='fruits' />
          <CapsuleTabs.Tab title='蔬菜' key='vegetables' />
          <CapsuleTabs.Tab title='动物' key='animals' />
        </CapsuleTabs>
      </DemoBlock>

      <DemoBlock title='禁用状态' padding='0'>
        <CapsuleTabs>
          <CapsuleTabs.Tab title='水果' key='fruits' />
          <CapsuleTabs.Tab title='蔬菜' key='vegetables' />
          <CapsuleTabs.Tab title='动物' key='animals' disabled />
        </CapsuleTabs>
      </DemoBlock>
    </>
  )
}











import React from 'react'
import { IndexBar, List } from 'antd-mobile'
import { lorem } from 'demos'

const getRandomList = (min: number, max: number): string[] => {
  return new Array(Math.floor(Math.random() * (max - min) + min)).fill('')
}

const charCodeOfA = 'A'.charCodeAt(0)
const groups = Array(26)
  .fill('')
  .map((_, i) => ({
    title: String.fromCharCode(charCodeOfA + i),
    items: getRandomList(3, 10).map(() => lorem.generateWords(2)),
  }))

export default () => {
  return (
    <div style={{ height: window.innerHeight }}>
      <IndexBar>
        {groups.map(group => {
          const { title, items } = group
          return (
            <IndexBar.Panel
              index={title}
              title={`标题${title}`}
              key={`标题${title}`}
            >
              <List>
                {items.map((item, index) => (
                  <List.Item key={index}>{item}</List.Item>
                ))}
              </List>
            </IndexBar.Panel>
          )
        })}
      </IndexBar>
    </div>
  )
}















import React from 'react'
import { JumboTabs } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <JumboTabs>
          <JumboTabs.Tab title='水果' description='描述文案' key='fruits'>
            菠萝
          </JumboTabs.Tab>
          <JumboTabs.Tab title='蔬菜' description='描述文案' key='vegetables'>
            西红柿
          </JumboTabs.Tab>
          <JumboTabs.Tab title='动物' description='描述文案' key='animals'>
            蚂蚁
          </JumboTabs.Tab>
        </JumboTabs>
      </DemoBlock>

      <DemoBlock title='超长自动滑动' padding='0'>
        <JumboTabs defaultActiveKey='1'>
          <JumboTabs.Tab title='Espresso' description='描述文案' key='1'>
            1
          </JumboTabs.Tab>
          <JumboTabs.Tab title='Coffee Latte' description='描述文案' key='2'>
            2
          </JumboTabs.Tab>
          <JumboTabs.Tab title='Cappuccino' description='描述文案' key='3'>
            3
          </JumboTabs.Tab>
          <JumboTabs.Tab title='Americano' description='描述文案' key='4'>
            4
          </JumboTabs.Tab>
          <JumboTabs.Tab title='Flat White' description='描述文案' key='5'>
            5
          </JumboTabs.Tab>
          <JumboTabs.Tab
            title='Caramel Macchiato'
            description='描述文案'
            key='6'
          >
            6
          </JumboTabs.Tab>
          <JumboTabs.Tab title='Cafe Mocha' description='描述文案' key='7'>
            7
          </JumboTabs.Tab>
        </JumboTabs>
      </DemoBlock>

      <DemoBlock title='没有内容区' padding='0'>
        <JumboTabs>
          <JumboTabs.Tab title='水果' description='描述文案' key='fruits' />
          <JumboTabs.Tab title='蔬菜' description='描述文案' key='vegetables' />
          <JumboTabs.Tab title='昆虫' description='描述文案' key='insects' />
          <JumboTabs.Tab title='花卉' description='描述文案' key='flowers' />
          <JumboTabs.Tab title='鸟类' description='描述文案' key='birds' />
          <JumboTabs.Tab title='人类' description='描述文案' key='human' />
        </JumboTabs>
      </DemoBlock>

      <DemoBlock title='禁用状态' padding='0'>
        <JumboTabs>
          <JumboTabs.Tab title='水果' description='描述文案' key='fruits' />
          <JumboTabs.Tab title='蔬菜' description='描述文案' key='vegetables' />
          <JumboTabs.Tab
            title='动物'
            description='描述文案'
            key='animals'
            disabled
          />
        </JumboTabs>
      </DemoBlock>
    </>
  )
}












import React from 'react'
import { NavBar, Space, Toast } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { SearchOutline, MoreOutline, CloseOutline } from 'antd-mobile-icons'

import './demo1.less'

export default () => {
  const right = (
    <div style={{ fontSize: 24 }}>
      <Space style={{ '--gap': '16px' }}>
        <SearchOutline />
        <MoreOutline />
      </Space>
    </div>
  )

  const back = () =>
    Toast.show({
      content: '点击了返回区域',
      duration: 1000,
    })

  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <NavBar onBack={back}>标题</NavBar>
      </DemoBlock>

      <DemoBlock title='返回按钮显示文字' padding='0'>
        <NavBar back='返回' onBack={back}>
          标题
        </NavBar>
      </DemoBlock>

      <DemoBlock title='返回按钮不显示图标' padding='0'>
        <NavBar back='返回' onBack={back} backArrow={false}>
          标题
        </NavBar>
      </DemoBlock>

      <DemoBlock title='自定义返回按钮图标' padding='0'>
        <NavBar back='返回' backArrow={<CloseOutline />} onBack={back}>
          标题
        </NavBar>
      </DemoBlock>

      <DemoBlock title='自定义左侧区域' padding='0'>
        <NavBar back='返回' onBack={back} left='关闭'>
          标题
        </NavBar>
      </DemoBlock>

      <DemoBlock title='自定义右侧区域' padding='0'>
        <NavBar right={right} onBack={back}>
          标题
        </NavBar>
      </DemoBlock>

      <DemoBlock title='自定义高度及边框' padding='0'>
        <NavBar
          style={{
            '--height': '36px',
            '--border-bottom': '1px #eee solid',
          }}
          onBack={back}
        >
          标题
        </NavBar>
      </DemoBlock>

      <DemoBlock title='标题超长' padding='0'>
        <NavBar onBack={back}>这是一条很长很长很长很长很长很长的标题</NavBar>
      </DemoBlock>

      <DemoBlock title='显示副标题' padding='0'>
        <NavBar onBack={back}>
          <div>
            <div>标题</div>
            <div className='my-nav-bar-subtitle'>副标题</div>
          </div>
        </NavBar>
      </DemoBlock>
    </>
  )
}











import React from 'react'
import { CapsuleTabs } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <CapsuleTabs>
          <CapsuleTabs.Tab title='水果' key='fruits'>
            菠萝
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='蔬菜' key='vegetables'>
            西红柿
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='动物' key='animals'>
            蚂蚁
          </CapsuleTabs.Tab>
        </CapsuleTabs>
      </DemoBlock>

      <DemoBlock title='超长自动滑动' padding='0'>
        <CapsuleTabs defaultActiveKey='1'>
          <CapsuleTabs.Tab title='Espresso' key='1'>
            1
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Coffee Latte' key='2'>
            2
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Cappuccino' key='3'>
            3
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Americano' key='4'>
            4
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Flat White' key='5'>
            5
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Caramel Macchiato' key='6'>
            6
          </CapsuleTabs.Tab>
          <CapsuleTabs.Tab title='Cafe Mocha' key='7'>
            7
          </CapsuleTabs.Tab>
        </CapsuleTabs>
      </DemoBlock>

      <DemoBlock title='没有内容区' padding='0'>
        <CapsuleTabs>
          <CapsuleTabs.Tab title='水果' key='fruits' />
          <CapsuleTabs.Tab title='蔬菜' key='vegetables' />
          <CapsuleTabs.Tab title='动物' key='animals' />
        </CapsuleTabs>
      </DemoBlock>

      <DemoBlock title='禁用状态' padding='0'>
        <CapsuleTabs>
          <CapsuleTabs.Tab title='水果' key='fruits' />
          <CapsuleTabs.Tab title='蔬菜' key='vegetables' />
          <CapsuleTabs.Tab title='动物' key='animals' disabled />
        </CapsuleTabs>
      </DemoBlock>
    </>
  )
}










import React, { FC } from 'react'
import { NavBar, TabBar } from 'antd-mobile'
import {
  Route,
  Switch,
  useHistory,
  useLocation,
  MemoryRouter as Router,
} from 'react-router-dom'
import {
  AppOutline,
  MessageOutline,
  UnorderedListOutline,
  UserOutline,
} from 'antd-mobile-icons'

import styles from './demo2.less'

const Bottom: FC = () => {
  const history = useHistory()
  const location = useLocation()
  const { pathname } = location

  const setRouteActive = (value: string) => {
    history.push(value)
  }

  const tabs = [
    {
      key: '/home',
      title: '首页',
      icon: <AppOutline />,
    },
    {
      key: '/todo',
      title: '待办',
      icon: <UnorderedListOutline />,
    },
    {
      key: '/message',
      title: '消息',
      icon: <MessageOutline />,
    },
    {
      key: '/me',
      title: '我的',
      icon: <UserOutline />,
    },
  ]

  return (
    <TabBar activeKey={pathname} onChange={value => setRouteActive(value)}>
      {tabs.map(item => (
        <TabBar.Item key={item.key} icon={item.icon} title={item.title} />
      ))}
    </TabBar>
  )
}

export default () => {
  return (
    <Router initialEntries={['/home']}>
      <div className={styles.app}>
        <div className={styles.top}>
          <NavBar>配合路由使用</NavBar>
        </div>
        <div className={styles.body}>
          <Switch>
            <Route exact path='/home'>
              <Home />
            </Route>
            <Route exact path='/todo'>
              <Todo />
            </Route>
            <Route exact path='/message'>
              <Message />
            </Route>
            <Route exact path='/me'>
              <PersonalCenter />
            </Route>
          </Switch>
        </div>
        <div className={styles.bottom}>
          <Bottom />
        </div>
      </div>
    </Router>
  )
}

function Home() {
  return <div>首页</div>
}

function Todo() {
  return <div>待办</div>
}

function Message() {
  return <div>消息</div>
}

function PersonalCenter() {
  return <div>我的</div>
}









.app {
  height: 100vh;
  display: flex;
  flex-direction: column;
}

.top {
  flex: 0;
  border-bottom: solid 1px var(--adm-color-border);
}

.body {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

.bottom {
  flex: 0;
  border-top: solid 1px var(--adm-color-border);
}







import React, { useState } from 'react'
import { SideBar } from 'antd-mobile'
import { tabs } from './tabs'
import styles from './demo3.less'
import classNames from 'classnames'

export default () => {
  const [activeKey, setActiveKey] = useState('key1')

  return (
    <div className={styles.container}>
      <div className={styles.side}>
        <SideBar activeKey={activeKey} onChange={setActiveKey}>
          {tabs.map(item => (
            <SideBar.Item key={item.key} title={item.title} />
          ))}
        </SideBar>
      </div>
      <div className={styles.main}>
        <div
          className={classNames(
            styles.content,
            activeKey === 'key1' && styles.active
          )}
        >
          页面 1
        </div>
        <div
          className={classNames(
            styles.content,
            activeKey === 'key2' && styles.active
          )}
        >
          页面 2
        </div>
        <div
          className={classNames(
            styles.content,
            activeKey === 'key3' && styles.active
          )}
        >
          页面 3
        </div>
      </div>
    </div>
  )
}



///import { Badge } from 'antd-mobile'

export const tabs = [
  {
    key: 'key1',
    title: '选项一',
    badge: Badge.dot,
  },
  {
    key: 'key2',
    title: '选项二',
    badge: '5',
  },
  {
    key: 'key3',
    title: '选项三',
    badge: '99+',
    disabled: true,
  },
]












///TABS 

import React from 'react'
import { Tabs } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <Tabs>
          <Tabs.Tab title='水果' key='fruits'>
            菠萝
          </Tabs.Tab>
          <Tabs.Tab title='蔬菜' key='vegetables'>
            西红柿
          </Tabs.Tab>
          <Tabs.Tab title='动物' key='animals'>
            蚂蚁
          </Tabs.Tab>
        </Tabs>
      </DemoBlock>

      <DemoBlock title='超长自动滚动' padding='0'>
        <Tabs defaultActiveKey='1'>
          <Tabs.Tab title='Espresso' key='1'>
            1
          </Tabs.Tab>
          <Tabs.Tab title='Coffee Latte' key='2'>
            2
          </Tabs.Tab>
          <Tabs.Tab title='Cappuccino' key='3'>
            3
          </Tabs.Tab>
          <Tabs.Tab title='Americano' key='4'>
            4
          </Tabs.Tab>
          <Tabs.Tab title='Flat White' key='5'>
            5
          </Tabs.Tab>
          <Tabs.Tab title='Caramel Macchiato' key='6'>
            6
          </Tabs.Tab>
          <Tabs.Tab title='Cafe Mocha' key='7'>
            7
          </Tabs.Tab>
        </Tabs>
      </DemoBlock>

      <DemoBlock title='没有内容区' padding='0'>
        <Tabs>
          <Tabs.Tab title='水果' key='fruits' />
          <Tabs.Tab title='蔬菜' key='vegetables' />
          <Tabs.Tab title='动物' key='animals' />
        </Tabs>
      </DemoBlock>

      <DemoBlock title='禁用状态' padding='0'>
        <Tabs>
          <Tabs.Tab title='水果' key='fruits' />
          <Tabs.Tab title='蔬菜' key='vegetables' />
          <Tabs.Tab title='动物' key='animals' disabled />
        </Tabs>
      </DemoBlock>
    </>
  )
}


///TAB2 import React from 'react'
import { Tabs, Badge } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { AppstoreOutline } from 'antd-mobile-icons'
import styles from './demo2.less'

export default () => {
  return (
    <>
      <DemoBlock title='搭配 Badge 使用' padding='0'>
        <Tabs>
          <Tabs.Tab title='水果' key='fruits'>
            菠萝
          </Tabs.Tab>
          <Tabs.Tab title='蔬菜' key='vegetables'>
            西红柿
          </Tabs.Tab>
          <Tabs.Tab
            title={
              <Badge content='1' style={{ '--right': '-10px', '--top': '8px' }}>
                动物
              </Badge>
            }
            key='animals'
          >
            蚂蚁
          </Tabs.Tab>
        </Tabs>
      </DemoBlock>

      <DemoBlock title='自定义选中项下划线长度' padding='0'>
        <Tabs
          activeLineMode='fixed'
          style={{
            '--fixed-active-line-width': '20px',
          }}
        >
          <Tabs.Tab title='超长的tab111' key='1'>
            1
          </Tabs.Tab>
          <Tabs.Tab title='超长的tab2' key='2'>
            2
          </Tabs.Tab>
          <Tabs.Tab title='超长的tab333' key='3'>
            3
          </Tabs.Tab>
          <Tabs.Tab title='超长的tab4444' key='4'>
            4
          </Tabs.Tab>
          <Tabs.Tab title='超长的tab55555' key='5'>
            5
          </Tabs.Tab>
        </Tabs>
      </DemoBlock>

      <DemoBlock title='自定义字体大小' padding='0'>
        <Tabs
          style={{
            '--title-font-size': '13px',
          }}
        >
          <Tabs.Tab title='水果' key='fruits' />
          <Tabs.Tab title='蔬菜' key='vegetables' />
          <Tabs.Tab title='动物' key='animals' />
        </Tabs>
      </DemoBlock>

      <DemoBlock title='自定义拓展图标' padding='0'>
        <div className={styles.customHeader}>
          <Tabs className={styles.tabs}>
            <Tabs.Tab title='超长的tab111' key='1' />
            <Tabs.Tab title='超长的tab2' key='2' />
            <Tabs.Tab title='超长的tab333' key='3' />
            <Tabs.Tab title='超长的tab4444' key='4' />
            <Tabs.Tab title='超长的tab55555' key='5' />
          </Tabs>
          <AppstoreOutline className={styles.moreIcon} />
        </div>
      </DemoBlock>
    </>
  )
}


//TABS 3

import React, { useRef, useState } from 'react'
import { Tabs, Swiper } from 'antd-mobile'
import { DemoBlock } from 'demos'
import styles from './demo3.less'
import { SwiperRef } from 'antd-mobile/es/components/swiper'

const tabItems = [
  { key: 'fruits', title: '水果' },
  { key: 'vegetables', title: '蔬菜' },
  { key: 'animals', title: '动物' },
]

export default () => {
  const swiperRef = useRef<SwiperRef>(null)
  const [activeIndex, setActiveIndex] = useState(1)

  return (
    <>
      <DemoBlock title='配合 Swiper 实现手势滑动' padding='0'>
        <Tabs
          activeKey={tabItems[activeIndex].key}
          onChange={key => {
            const index = tabItems.findIndex(item => item.key === key)
            setActiveIndex(index)
            swiperRef.current?.swipeTo(index)
          }}
        >
          {tabItems.map(item => (
            <Tabs.Tab title={item.title} key={item.key} />
          ))}
        </Tabs>
        <Swiper
          direction='horizontal'
          loop
          indicator={() => null}
          ref={swiperRef}
          defaultIndex={activeIndex}
          onIndexChange={index => {
            setActiveIndex(index)
          }}
        >
          <Swiper.Item>
            <div className={styles.content}>菠萝</div>
          </Swiper.Item>
          <Swiper.Item>
            <div className={styles.content}>西红柿</div>
          </Swiper.Item>
          <Swiper.Item>
            <div className={styles.content}>蚂蚁</div>
          </Swiper.Item>
        </Swiper>
      </DemoBlock>
    </>
  )
}

//Tabs 4

import React, { useEffect, useState } from 'react'
import { Tabs } from 'antd-mobile'
import { DemoBlock, lorem } from 'demos'
import styles from './demo4.less'
import { useThrottleFn } from 'ahooks'

const tabItems = [
  { key: '1', title: '第一项', text: lorem.generateParagraphs(8) },
  { key: '2', title: '第二项', text: lorem.generateParagraphs(8) },
  { key: '3', title: '第三项', text: lorem.generateParagraphs(8) },
  { key: '4', title: '第四项', text: lorem.generateParagraphs(8) },
]

const tabHeight = 42

export default () => {
  const [activeKey, setActiveKey] = useState('1')

  const { run: handleScroll } = useThrottleFn(
    () => {
      let currentKey = tabItems[0].key
      for (const item of tabItems) {
        const element = document.getElementById(`anchor-${item.key}`)
        if (!element) continue
        const rect = element.getBoundingClientRect()
        if (rect.top <= tabHeight) {
          currentKey = item.key
        } else {
          break
        }
      }
      setActiveKey(currentKey)
    },
    {
      leading: true,
      trailing: true,
      wait: 100,
    }
  )

  useEffect(() => {
    window.addEventListener('scroll', handleScroll)
    return () => {
      window.removeEventListener('scroll', handleScroll)
    }
  }, [])

  return (
    <>
      <DemoBlock title='作为页面滚动的导航' padding='0'>
        <div className={styles.tabsContainer}>
          <Tabs
            activeKey={activeKey}
            onChange={key => {
              document.getElementById(`anchor-${key}`)?.scrollIntoView()
              window.scrollTo({
                top: window.scrollY - tabHeight,
              })
            }}
          >
            {tabItems.map(item => (
              <Tabs.Tab title={item.title} key={item.key} />
            ))}
          </Tabs>
        </div>
        <div className={styles.content}>
          {tabItems.map(item => (
            <div key={item.key}>
              <h2 id={`anchor-${item.key}`}>{item.title}</h2>
              {item.text}
            </div>
          ))}
        </div>
      </DemoBlock>
    </>
  )
}












import { DemoBlock, DemoDescription } from 'demos'
import React from 'react'
import { Avatar, List, Space } from 'antd-mobile'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Space block wrap>
          <Avatar src={demoAvatarImages[0]} />
          <Avatar src={demoAvatarImages[1]} />
          <Avatar src={demoAvatarImages[2]} />
          <Avatar src={demoAvatarImages[3]} />
        </Space>
      </DemoBlock>

      <DemoBlock title='占位头像'>
        <Space block direction='vertical'>
          <Avatar src='' />
          <DemoDescription>
            如果你不传图片，或者图片加载失败，那么会显示一个默认的图像
          </DemoDescription>
        </Space>
      </DemoBlock>

      <DemoBlock title='自定义尺寸'>
        <Space block wrap>
          <Avatar src={demoAvatarImages[0]} style={{ '--size': '32px' }} />
          <Avatar src={demoAvatarImages[0]} style={{ '--size': '48px' }} />
          <Avatar src={demoAvatarImages[0]} style={{ '--size': '64px' }} />
        </Space>
      </DemoBlock>

      <DemoBlock title='配合列表使用' padding='0'>
        <List>
          <List.Item
            prefix={<Avatar src={demoAvatarImages[0]} />}
            description='Deserunt dolor ea eaque eos'
          >
            Novalee Spicer
          </List.Item>
        </List>
      </DemoBlock>
    </>
  )
}

const demoAvatarImages = [
  'https://images.unsplash.com/photo-1548532928-b34e3be62fc6?ixlib=rb-1.2.1&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&ixid=eyJhcHBfaWQiOjE3Nzg0fQ',
  'https://images.unsplash.com/photo-1493666438817-866a91353ca9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=b616b2c5b373a80ffc9636ba24f7a4a9',
  'https://images.unsplash.com/photo-1542624937-8d1e9f53c1b9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&ixid=eyJhcHBfaWQiOjE3Nzg0fQ',
  'https://images.unsplash.com/photo-1546967191-fdfb13ed6b1e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&ixid=eyJhcHBfaWQiOjE3Nzg0fQ',
]







import React from 'react'
import { Card, Toast, Button } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { AntOutline, RightOutline } from 'antd-mobile-icons'

import styles from './demo1.less'

export default () => {
  const onClick = () => {
    Toast.show('点击了卡片')
  }

  const onHeaderClick = () => {
    Toast.show('点击了卡片Header区域')
  }

  const onBodyClick = () => {
    Toast.show('点击了卡片Body区域')
  }
  return (
    <>
      <DemoBlock title='基础用法' background='gray'>
        <Card title='卡片标题' onClick={onClick}>
          卡片内容
        </Card>
      </DemoBlock>

      <DemoBlock title='没有卡片内容' background='gray'>
        <Card title='卡片标题' onClick={onClick} />
      </DemoBlock>

      <DemoBlock title='没有卡片标题' background='gray'>
        <Card onClick={onClick}>卡片内容</Card>
      </DemoBlock>

      <DemoBlock title='自定义卡片内容' background='gray'>
        <Card
          title={
            <div style={{ fontWeight: 'normal' }}>
              <AntOutline style={{ marginRight: '4px', color: '#1677ff' }} />
              卡片标题
            </div>
          }
          extra={<RightOutline />}
          onBodyClick={onBodyClick}
          onHeaderClick={onHeaderClick}
          style={{ borderRadius: '16px' }}
        >
          <div className={styles.content}>卡片内容</div>
          <div className={styles.footer} onClick={e => e.stopPropagation()}>
            <Button
              color='primary'
              onClick={() => {
                Toast.show('点击了底部按钮')
              }}
            >
              底部按钮
            </Button>
          </div>
        </Card>
      </DemoBlock>

      <DemoBlock title='自定义卡片样式' background='gray'>
        <Card
          headerStyle={{
            color: '#1677ff',
          }}
          bodyClassName={styles.customBody}
          title='卡片标题'
        >
          卡片内容
        </Card>
      </DemoBlock>
    </>
  )
}






///CPASSLOCK 1\\

import React from 'react'
import { Collapse } from 'antd-mobile'
import { DemoBlock, lorem } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <Collapse defaultActiveKey={['1']}>
          <Collapse.Panel key='1' title='第一项'>
            {mockContents[0]}
          </Collapse.Panel>
          <Collapse.Panel key='2' title='第二项'>
            {mockContents[1]}
          </Collapse.Panel>
          <Collapse.Panel key='3' title='第三项'>
            {mockContents[2]}
          </Collapse.Panel>
        </Collapse>
      </DemoBlock>

      <DemoBlock title='手风琴模式' padding='0'>
        <Collapse accordion>
          <Collapse.Panel key='1' title='第一项'>
            手风琴模式只能同时展开一个
          </Collapse.Panel>
          <Collapse.Panel key='2' title='第二项'>
            手风琴模式只能同时展开一个
          </Collapse.Panel>
          <Collapse.Panel key='3' title='第三项'>
            手风琴模式只能同时展开一个
          </Collapse.Panel>
        </Collapse>
      </DemoBlock>
    </>
  )
}

const mockContents = Array(5)
  .fill(null)
  .map(() => lorem.generateParagraphs(1))\\


/CAPAS2 


import React, { useState, useEffect } from 'react'
import { Collapse, DotLoading, Result } from 'antd-mobile'
import { DemoBlock, sleep } from 'demos'
import {
  CheckCircleOutline,
  CloseCircleOutline,
  ArrowDownCircleOutline,
  AddOutline,
  MinusOutline,
} from 'antd-mobile-icons'

const DynamicContent = () => {
  const [finished, setFinished] = useState(false)

  useEffect(() => {
    const loadData = async () => {
      await sleep(1000)
      setFinished(true)
    }
    loadData()
  }, [])

  return finished ? (
    <Result status='success' title='处理成功' />
  ) : (
    <DotLoading />
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='禁用' padding='0'>
        <Collapse>
          <Collapse.Panel key='1' title='第一项'>
            这里是第一项的内容
          </Collapse.Panel>
          <Collapse.Panel key='2' title='第二项' disabled>
            这里是第二项的内容
          </Collapse.Panel>
          <Collapse.Panel key='3' title='第三项' disabled>
            这里是第三项的内容
          </Collapse.Panel>
        </Collapse>
      </DemoBlock>

      <DemoBlock title='自定义折叠图标' padding='0'>
        <Collapse
          defaultActiveKey={['1']}
          arrow={active => (active ? <MinusOutline /> : <AddOutline />)}
        >
          <Collapse.Panel key='1' title='第一项'>
            你可以通过 Collapse 的 arrow 属性来控制全部面板的箭头
          </Collapse.Panel>
          <Collapse.Panel
            key='2'
            title='第二项'
            arrow={<ArrowDownCircleOutline />}
          >
            也可以通过 Collapse.Panel 的 arrow 属性来自定义单个面板的箭头
          </Collapse.Panel>
          <Collapse.Panel
            key='3'
            title='第三项'
            arrow={active =>
              active ? <CheckCircleOutline /> : <CloseCircleOutline />
            }
          >
            如果你给 arrow 属性传入的是是一个渲染函数，那么 antd-mobile
            不会为你增加动画，arrow 属性的效果就完全交由你自己来控制了
          </Collapse.Panel>
        </Collapse>
      </DemoBlock>

      <DemoBlock title='动态内容' padding='0'>
        <Collapse accordion>
          <Collapse.Panel key='1' title='第一项'>
            <DynamicContent />
          </Collapse.Panel>
          <Collapse.Panel key='2' title='第二项'>
            <DynamicContent />
          </Collapse.Panel>
        </Collapse>
      </DemoBlock>
    </>
  )
}








import React from 'react'
import { Ellipsis, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'

const content =
  '蚂蚁的企业级产品是一个庞大且复杂的体系。这类产品不仅量级巨大且功能复杂，而且变动和并发频繁，常常需要设计与开发能够快速的做出响应。同时这类产品中有存在很多类似的页面以及组件，可以通过抽象得到一些稳定且高复用性的内容。'

export default () => {
  return (
    <>
      <DemoBlock title='尾部省略'>
        <Ellipsis direction='end' content={content} />
      </DemoBlock>

      <DemoBlock title='头部省略'>
        <Ellipsis direction='start' content={content} />
      </DemoBlock>

      <DemoBlock title='中间省略'>
        <Ellipsis direction='middle' content={content} />
      </DemoBlock>

      <DemoBlock title='多行省略'>
        <Ellipsis direction='end' rows={3} content={content} />
      </DemoBlock>

      <DemoBlock title='展开收起'>
        <Ellipsis
          direction='end'
          content={content}
          expandText='展开'
          collapseText='收起'
        />
      </DemoBlock>

      <DemoBlock title='仅展开'>
        <Space block direction='vertical'>
          <Ellipsis direction='end' content={content} expandText='展开' />
          <Ellipsis direction='start' content={content} expandText='展开' />
          <Ellipsis direction='middle' content={content} expandText='展开' />
        </Space>
      </DemoBlock>

      <DemoBlock title='emoji'>
        <Ellipsis
          direction='end'
          content={
            '🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉'
          }
          expandText='展开'
          collapseText='收起'
        />
      </DemoBlock>
    </>
  )
}


















import React from 'react'
import { Image, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'

import styles from './demo1.less'

const demoSrc =
  'https://images.unsplash.com/photo-1567945716310-4745a6b7844b?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=60'
const demoSrc2 =
  'https://images.unsplash.com/photo-1620476214170-1d8080f65cdb?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=3150&q=80'

export default () => {
  return (
    <div style={{ userSelect: 'none' }}>
      <DemoBlock title='基础用法'>
        <Image src={demoSrc} />
      </DemoBlock>

      <DemoBlock title='多种填充模式'>
        <Space wrap>
          <Image src={demoSrc} width={100} height={100} fit='fill' />
          <Image src={demoSrc} width={100} height={100} fit='contain' />
          <Image src={demoSrc} width={100} height={100} fit='cover' />
          <Image src={demoSrc} width={100} height={100} fit='scale-down' />
          <Image src={demoSrc} width={100} height={100} fit='none' />
        </Space>
      </DemoBlock>

      <DemoBlock title='自定义圆角'>
        <Space wrap>
          <Image
            src={demoSrc}
            width={64}
            height={64}
            fit='cover'
            style={{ borderRadius: 4 }}
          />
          <Image
            src={demoSrc}
            width={64}
            height={64}
            fit='cover'
            style={{ borderRadius: 8 }}
          />
          <Image
            src={demoSrc}
            width={64}
            height={64}
            fit='cover'
            style={{ borderRadius: 32 }}
          />
        </Space>
      </DemoBlock>

      <DemoBlock title='通过 CSS 变量统一设置图片大小'>
        <div className={styles.imagesContainer}>
          <Space wrap>
            <Image src={demoSrc} />
            <Image src={demoSrc} />
            <Image src={demoSrc} />
          </Space>
        </div>
      </DemoBlock>

      <DemoBlock title='加载失败'>
        <Image src='/404' width={100} height={100} />
      </DemoBlock>

      <DemoBlock title='懒加载'>
        <Image lazy src={demoSrc2} />
      </DemoBlock>
    </div>
  )
}








import React, { useState } from 'react'
import { ImageViewer, Button } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { demoImage, demoImages } from './images'
import styles from './demo1.less'

// 单张图片预览
const Single = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button
        onClick={() => {
          setVisible(true)
        }}
      >
        显示图片
      </Button>
      <ImageViewer
        image={demoImage}
        visible={visible}
        onClose={() => {
          setVisible(false)
        }}
      />
    </>
  )
}

// 多张图片预览
const Multi = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button
        onClick={() => {
          setVisible(true)
        }}
      >
        显示图片
      </Button>
      <ImageViewer.Multi
        images={demoImages}
        visible={visible}
        defaultIndex={1}
        onClose={() => {
          setVisible(false)
        }}
      />
    </>
  )
}

const ViewWithFooter = () => {
  const [visible, setVisible] = useState(false)

  const renderFooter = (image: string, index: number) => {
    return (
      <div className={styles.footer}>
        <div
          className={styles.footerButton}
          onClick={() => {
            console.log('Loading...')
          }}
        >
          查看原图{index + 1}
        </div>
      </div>
    )
  }

  return (
    <>
      <Button
        onClick={() => {
          setVisible(true)
        }}
      >
        显示图片
      </Button>
      <ImageViewer.Multi
        images={demoImages}
        visible={visible}
        defaultIndex={1}
        onClose={() => {
          setVisible(false)
        }}
        renderFooter={renderFooter}
      />
    </>
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='单张图片预览'>
        <Single />
      </DemoBlock>

      <DemoBlock title='多张图片预览'>
        <Multi />
      </DemoBlock>

      <DemoBlock title='指令式调用'>
        <Button
          onClick={() => {
            ImageViewer.Multi.show({ images: demoImages })
          }}
        >
          显示图片
        </Button>
      </DemoBlock>

      <DemoBlock title='手动控制关闭'>
        <Button
          onClick={() => {
            const handler = ImageViewer.show({
              image: demoImage,
            })
            setTimeout(() => {
              handler.close()
            }, 3000)
          }}
        >
          显示图片并在3秒后关闭
        </Button>
      </DemoBlock>

      <DemoBlock title='自定义底部额外内容'>
        <ViewWithFooter />
      </DemoBlock>
    </>
  )
}










import React, { useEffect, useState } from 'react'
import {
  Button,
  InfiniteScroll,
  List,
  DotLoading,
  SearchBar,
} from 'antd-mobile'
import styles from './demo3.less'
import { mockRequest } from './mock-request'

export default () => {
  const [data, setData] = useState<string[]>([])
  const [hasMore, setHasMore] = useState(true)
  async function loadMore() {
    const append = await mockRequest()
    setData(val => [...val, ...append])
    setHasMore(append.length > 0)
  }

  function doSearch() {
    setData([])
    setHasMore(true)
    loadMore()
  }

  useEffect(() => {
    doSearch()
  }, [])

  return (
    <>
      <div className={styles.header}>
        <div className={styles.left}>
          <SearchBar />
        </div>
        <div className={styles.right}>
          <Button size='small' color='primary' onClick={doSearch}>
            搜索
          </Button>
        </div>
      </div>
      {data.length > 0 ? (
        <>
          <List>
            {data.map((item, index) => (
              <List.Item key={index}>{item}</List.Item>
            ))}
          </List>
          <InfiniteScroll loadMore={loadMore} hasMore={hasMore} />
        </>
      ) : (
        <div className={styles.placeholder}>
          <div className={styles.loadingWrapper}>
            <DotLoading />
          </div>
          正在拼命加载数据
        </div>
      )}
    </>
  )
}

////


import { sleep } from 'antd-mobile/es/utils/sleep'

let count = 0

export async function mockRequest() {
  if (count >= 5) {
    return []
  }
  await sleep(2000)
  count++
  return [
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
  ]
}












import React from 'react'
import { List, Switch } from 'antd-mobile'
import {
  UnorderedListOutline,
  PayCircleOutline,
  SetOutline,
} from 'antd-mobile-icons'

export default () => {
  return (
    <>
      <List header='基础用法'>
        <List.Item>1</List.Item>
        <List.Item>2</List.Item>
        <List.Item>3</List.Item>
      </List>

      <List header='可点击列表'>
        <List.Item prefix={<UnorderedListOutline />} onClick={() => {}}>
          账单
        </List.Item>
        <List.Item prefix={<PayCircleOutline />} onClick={() => {}}>
          总资产
        </List.Item>
        <List.Item prefix={<SetOutline />} onClick={() => {}}>
          设置
        </List.Item>
      </List>

      <List header='复杂列表'>
        <List.Item extra={<Switch defaultChecked />}>新消息通知</List.Item>
        <List.Item extra='未开启' clickable>
          大字号模式
        </List.Item>
        <List.Item description='管理已授权的产品和设备' clickable>
          授权管理
        </List.Item>
        <List.Item title='副标题信息A' description='副标题信息B' clickable>
          这里是主信息
        </List.Item>
      </List>

      <List header='禁用状态'>
        <List.Item disabled clickable prefix={<UnorderedListOutline />}>
          账单
        </List.Item>
        <List.Item disabled prefix={<PayCircleOutline />}>
          总资产
        </List.Item>
      </List>
    </>
  )
}



/// import { List } from 'antd-mobile'
import React from 'react'

export default () => {
  function handleClick() {
    // ...
  }
  return (
    <List mode='card' header='卡片列表'>
      <List.Item extra='按照支付设置的顺序扣款' onClick={handleClick}>
        扣款方式
      </List.Item>
      <List.Item extra='200元' onClick={handleClick}>
        月限额
      </List.Item>
      <List.Item onClick={handleClick}>帮助中心</List.Item>
      <List.Item onClick={handleClick}>关闭服务</List.Item>
    </List>
  )
}









import React from 'react'
import { PageIndicator } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <PageIndicator total={4} current={0} />
      </DemoBlock>

      <DemoBlock title='白色' background='rgb(212 212 212)'>
        <PageIndicator total={4} current={0} color='white' />
      </DemoBlock>

      <DemoBlock title='竖直方向'>
        <PageIndicator total={4} current={0} direction='vertical' />
      </DemoBlock>

      <DemoBlock title='自定义颜色和大小'>
        <PageIndicator
          total={4}
          current={0}
          style={{
            '--dot-color': 'rgba(0, 0, 0, 0.4)',
            '--active-dot-color': '#ffc0cb',
            '--dot-size': '10px',
            '--active-dot-size': '30px',
            '--dot-border-radius': '50%',
            '--active-dot-border-radius': '15px',
            '--dot-spacing': '8px',
          }}
        />
      </DemoBlock>
    </>
  )
}












//STEP 1


import React from 'react'
import { Steps } from 'antd-mobile'
import { DemoBlock } from 'demos'

const { Step } = Steps

export default () => {
  return (
    <>
      <DemoBlock title='横向步骤条'>
        <Steps current={1}>
          <Step title='标题1' description='描述' />
          <Step title='标题2' description='描述' />
          <Step title='标题3' description='描述' />
        </Steps>
      </DemoBlock>

      <DemoBlock title='横向步骤条失败'>
        <Steps current={2}>
          <Step title='第一步' />
          <Step title='第二步' />
          <Step title='第三步' status='error' />
          <Step title='第四步' />
        </Steps>
      </DemoBlock>

      <DemoBlock title='纵向步骤条'>
        <Steps direction='vertical'>
          <Step title='填写机构信息' status='process' />
          <Step title='签约机构' status='wait' />
          <Step title='关联服务区' status='wait' />
        </Steps>
      </DemoBlock>

      <DemoBlock title='纵向步骤条失败'>
        <Steps direction='vertical'>
          <Step
            title='填写机构信息'
            status='finish'
            description='完成时间：2020-12-01 12:30'
          />
          <Step
            title='签约机构'
            status='finish'
            description='完成时间：2020-12-01 12:30'
          />
          <Step
            title='关联服务区'
            status='finish'
            description='完成时间：2020-12-01 12:30'
          />
          <Step title='审批失败' status='error' />
        </Steps>
      </DemoBlock>
    </>
  )
}

/STEP 2


import React from 'react'
import { Button, Space, Steps } from 'antd-mobile'
import { DemoBlock } from 'demos'
import {
  CheckCircleFill,
  ClockCircleFill,
  HandPayCircleOutline,
} from 'antd-mobile-icons'

const { Step } = Steps

export default () => {
  return (
    <>
      <DemoBlock title='自定义图标及大小'>
        <Steps
          direction='vertical'
          current={1}
          style={{
            '--title-font-size': '17px',
            '--description-font-size': '15px',
            '--indicator-margin-right': '12px',
            '--icon-size': '22px',
          }}
        >
          <Step
            title='填写机构信息'
            description='这里是一些描述'
            icon={<CheckCircleFill />}
          />
          <Step
            title='签约机构'
            description={
              <Space block direction='vertical'>
                <div>这里是一些描述</div>
                <Button color='primary'>去查看</Button>
              </Space>
            }
            icon={<ClockCircleFill />}
          />
          <Step
            title='关联服务区'
            description='这里是一些描述'
            icon={<HandPayCircleOutline />}
          />
        </Steps>
      </DemoBlock>
    </>
  )
}


import React from 'react'
import { Tag, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Tag>123</Tag>
      </DemoBlock>

      <DemoBlock title='线框标签'>
        <Space>
          <Tag color='primary' fill='outline'>
            Primary
          </Tag>
          <Tag color='#87d068' fill='outline'>
            #87d068
          </Tag>
          <Tag color='#ff6430' fill='outline'>
            #ff6430
          </Tag>
        </Space>
      </DemoBlock>

      <DemoBlock title='语义标签'>
        <Space>
          <Tag color='default'>Default</Tag>
          <Tag color='primary'>测试</Tag>
          <Tag color='success'>Success</Tag>
          <Tag color='warning'>Warning</Tag>
          <Tag color='danger'>Danger</Tag>
        </Space>
      </DemoBlock>

      <DemoBlock title='圆角标签'>
        <Tag round color='#2db7f5'>
          kongxin
        </Tag>
      </DemoBlock>

      <DemoBlock title='自定义颜色'>
        <Space>
          <Tag color='#2db7f5'>#2db7f5</Tag>
          <Tag color='#87d068'>#87d068</Tag>
          <Tag color='#108ee9'>#108ee9</Tag>
        </Space>
      </DemoBlock>

      <DemoBlock title='通过 CSS 变量个性化'>
        <Space>
          <Tag
            color='primary'
            fill='outline'
            style={{ '--border-radius': '6px' }}
          >
            Primary
          </Tag>
          <Tag
            color='success'
            fill='outline'
            style={{ '--background-color': '#c8f7c5' }}
          >
            Success
          </Tag>
          <Tag
            color='warning'
            style={{ '--text-color': 'var(--adm-color-text)' }}
          >
            Warning
          </Tag>
          <Tag
            color='danger'
            fill='outline'
            style={{ '--border-color': 'var(--adm-color-weak)' }}
          >
            Danger
          </Tag>
        </Space>
      </DemoBlock>
    </>
  )
}








import React from 'react'
import { Footer } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { HandPayCircleOutline } from 'antd-mobile-icons'
import { ChipItem, LinkItem } from '../footer'

export default () => {
  const links: LinkItem[] = [
    {
      text: '阿里云',
      href: 'https://www.aliyun.com/',
    },
    {
      text: '支付宝',
      href: 'https://www.antgroup.com/',
    },
  ]
  const chips: ChipItem[] = [
    {
      text: '蚂蚁借呗',
    },
    {
      text: '备用金',
    },
    {
      text: '蚂蚁花呗',
    },
  ]
  const chipsLinkData: ChipItem[] = [
    {
      text: '蚂蚁借呗',
      type: 'link',
    },
    {
      text: '备用金',
      type: 'link',
    },
    {
      text: '蚂蚁花呗',
      type: 'link',
    },
  ]

  const onChipClick = (item: ChipItem, index: number) => {
    console.log(item, index)
    alert(`${item?.text}被点击了`)
  }
  const onLinkClick = (item: LinkItem, index: number) => {
    console.log(item, index)
    alert(`跳转到${item?.href}`)
  }

  return (
    <>
      <DemoBlock title='基础页脚'>
        <Footer label='没有更多了'></Footer>
      </DemoBlock>
      <DemoBlock title='自定义 label'>
        <Footer
          label={
            <div>
              <HandPayCircleOutline /> 蚂蚁财富
            </div>
          }
        ></Footer>
      </DemoBlock>
      <DemoBlock title='带内容的页脚'>
        <Footer content='@ 2004-2020 Alipay.com All rights reserved'></Footer>
      </DemoBlock>
      <DemoBlock title='带链接的页脚'>
        <Footer
          links={[
            {
              text: '阿里云',
              href: 'https://www.aliyun.com/',
            },
          ]}
        ></Footer>
      </DemoBlock>
      <DemoBlock title='通过点击事件跳转'>
        <Footer links={links} onLinkClick={onLinkClick}></Footer>
      </DemoBlock>
      <DemoBlock title='带标签的页脚'>
        <Footer chips={chips}></Footer>
      </DemoBlock>
      <DemoBlock title='标签可点击'>
        <Footer chips={chipsLinkData} onChipClick={onChipClick}></Footer>
      </DemoBlock>
      <DemoBlock title='组合使用'>
        <Footer
          label='没有更多了'
          content='@ 2004-2020 Alipay.com All rights reserved'
          links={links}
          chips={chips}
        ></Footer>
      </DemoBlock>
    </>
  )
}








//Cascader 1


import React, { useEffect, useMemo, useState } from 'react'
import { Cascader, Button } from 'antd-mobile'
import { DemoBlock, sleep } from 'demos'
import { CascaderOption } from '../../cascader-view'

function AsyncLoadDataDemo() {
  const [visible, setVisible] = useState(false)
  const [valueToOptions, setValueToOptions] = useState(
    {} as Record<string, CascaderOption[] | null>
  )
  const options = useMemo<CascaderOption[]>(() => {
    function generate(v: string): CascaderOption[] | undefined {
      const options = valueToOptions[v]
      if (options === null) {
        return undefined
      }
      if (options === undefined) {
        return Cascader.optionSkeleton
      }
      return options.map(option => ({
        ...option,
        children: generate(option.value),
      }))
    }
    return generate('') ?? []
  }, [valueToOptions])

  async function fetchOptionsForValue(v: string, level: number) {
    if (v in valueToOptions) return
    if (level >= 3) {
      setValueToOptions(prev => ({
        ...prev,
        [v]: null,
      }))
      return
    }
    const data = await mockDataFetch(v)
    const options =
      data === null
        ? null
        : data.map(entry => ({
            value: entry,
            label: entry,
          }))
    setValueToOptions(prev => ({
      ...prev,
      [v]: options,
    }))
  }

  useEffect(() => {
    fetchOptionsForValue('', 0)
  }, [])

  return (
    <>
      <Button
        onClick={() => {
          setVisible(true)
        }}
      >
        选择
      </Button>
      <Cascader
        options={options}
        onSelect={value => {
          value.forEach((v, index) => {
            fetchOptionsForValue(v, index + 1)
          })
        }}
        visible={visible}
        onClose={() => {
          setVisible(false)
        }}
      />
    </>
  )
}

async function mockDataFetch(value: string) {
  await sleep(1000)
  return Array(5)
    .fill(null)
    .map((_, index) => (value ? `${value}-${index + 1}` : `选项 ${index + 1}`))
}

export default () => {
  return (
    <>
      <DemoBlock title='异步加载数据'>
        <AsyncLoadDataDemo />
      </DemoBlock>
    </>
  )
}








///2 import React, { useState } from 'react'
import { Cascader, Button, Space, Toast } from 'antd-mobile'
import { DemoBlock, DemoDescription } from 'demos'

import { options, longOptions } from './data'

// 基础用法
function BasicDemo() {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button
        onClick={() => {
          setVisible(true)
        }}
      >
        选择
      </Button>
      <Cascader
        options={options}
        visible={visible}
        onClose={() => {
          setVisible(false)
        }}
      />
    </>
  )
}

// 渲染所选值
function RenderChildrenDemo() {
  const [visible, setVisible] = useState(false)
  const [value, setValue] = useState<string[]>([])
  return (
    <Space align='center'>
      <Button
        onClick={() => {
          setVisible(true)
        }}
      >
        选择
      </Button>
      <Cascader
        options={options}
        visible={visible}
        onClose={() => {
          setVisible(false)
        }}
        value={value}
        onConfirm={setValue}
        onSelect={(val, extend) => {
          console.log('onSelect', val, extend.items)
        }}
      >
        {items => {
          if (items.every(item => item === null)) {
            return '未选择'
          } else {
            return items.map(item => item?.label ?? '未选择').join('-')
          }
        }}
      </Cascader>
    </Space>
  )
}

function ActionsDemo() {
  const [value, setValue] = useState<string[]>([])
  return (
    <Cascader
      options={options}
      value={value}
      onConfirm={v => {
        setValue(v)
      }}
    >
      {(_, actions) => <Button onClick={actions.open}>选择</Button>}
    </Cascader>
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <BasicDemo />
      </DemoBlock>

      <DemoBlock title='渲染所选值'>
        <RenderChildrenDemo />
      </DemoBlock>

      <DemoBlock title='指令式调用'>
        <Button
          onClick={async () => {
            const value = await Cascader.prompt({
              options,
              title: '选择地址',
            })
            Toast.show(value ? `你选择了 ${value.join('-')}` : '你没有进行选择')
          }}
        >
          弹出 Cascader
        </Button>
      </DemoBlock>

      <DemoBlock title='长数据'>
        <Button
          onClick={async () => {
            const value = await Cascader.prompt({
              options: longOptions,
              placeholder: '请选择',
            })
            Toast.show(
              value ? `你选择了 ${value.join(' - ')}` : '你没有进行选择'
            )
          }}
        >
          选择
        </Button>
      </DemoBlock>

      <DemoBlock title='使用 actions 来控制显示/隐藏'>
        <Space direction='vertical' block>
          <ActionsDemo />
          <DemoDescription>
            在 children 渲染函数中，你可以使用第二个参数 actions
            来非常方便的控制 Picker 的显示或隐藏
          </DemoDescription>
        </Space>
      </DemoBlock>
    </>
  )
}


//DATA JSON export const options = [
  {
    label: '浙江',
    value: '浙江',
    children: [
      {
        label: '杭州',
        value: '杭州',
        children: [
          {
            label: '西湖区',
            value: '西湖区',
          },
          {
            label: '上城区',
            value: '上城区',
          },
          {
            label: '余杭区',
            value: '余杭区',
            disabled: true,
          },
        ],
      },
      {
        label: '温州',
        value: '温州',
        children: [
          {
            label: '鹿城区',
            value: '鹿城区',
          },
          {
            label: '龙湾区',
            value: '龙湾区',
            disabled: true,
          },
          {
            label: '瓯海区',
            value: '瓯海区',
          },
        ],
      },
      {
        label: '宁波',
        value: '宁波',
        children: [
          {
            label: '海曙区',
            value: '海曙区',
          },
          {
            label: '江北区',
            value: '江北区',
          },
          {
            label: '镇海区',
            value: '镇海区',
          },
        ],
      },
    ],
  },
  {
    label: '安徽',
    value: '安徽',
    children: [
      {
        label: '合肥',
        value: '合肥',
        children: [
          {
            label: '包河区',
            value: '包河区',
          },
          {
            label: '蜀山区',
            value: '蜀山区',
          },
          {
            label: '瑶海区',
            value: '瑶海区',
          },
        ],
      },
      {
        label: '芜湖',
        value: '芜湖',
        children: [
          {
            label: '镜湖区',
            value: '镜湖区',
          },
          {
            label: '弋江区',
            value: '弋江区',
          },
          {
            label: '湾沚区',
            value: '湾沚区',
          },
        ],
      },
    ],
  },
  {
    label: '江苏',
    value: '江苏',
    children: [
      {
        label: '南京',
        value: '南京',
        children: [
          {
            label: '玄武区',
            value: '玄武区',
          },
          {
            label: '秦淮区',
            value: '秦淮区',
          },
          {
            label: '建邺区',
            value: '建邺区',
          },
        ],
      },
      {
        label: '苏州',
        value: '苏州',
        children: [
          {
            label: '虎丘区',
            value: '虎丘区',
          },
          {
            label: '吴中区',
            value: '吴中区',
          },
          {
            label: '相城区',
            value: '相城区',
          },
        ],
      },
    ],
  },
]

export const longOptions = new Array(20).fill('').map((value, index) => ({
  label: '标题 ' + (index + 1),
  value: '' + (index + 1),
  children: new Array(20).fill('').map((value_, index_) => ({
    label: `标题 ${index + 1}/${index_ + 1}`,
    value: `${index + 1}/${index_ + 1}`,
    children: new Array(20).fill('').map((value__, index__) => ({
      label: `标题 ${index + 1}/${index_ + 1}/${index__ + 1}`,
      value: `${index + 1}/${index_ + 1}/${index__ + 1}`,
    })),
  })),
}))

export const sameValueOptions = [
  {
    label: '左转',
    value: '左转',
    children: [
      {
        label: '左转',
        value: '左转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
      {
        label: '右转',
        value: '右转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
    ],
  },
  {
    label: '右转',
    value: '右转',
    children: [
      {
        label: '左转',
        value: '左转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
      {
        label: '右转',
        value: '右转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
    ],
  },
]












//CascaderView

import React, { useState } from 'react'
import { CascaderView } from 'antd-mobile'
import { DemoBlock } from 'demos'

import { options, sameValueOptions } from '../../cascader/demos/data'

export default () => {
  const [value, setValue] = useState<string[]>([])

  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <CascaderView options={options} />
      </DemoBlock>

      <DemoBlock title='受控模式' padding='0'>
        <CascaderView
          options={options}
          value={value}
          onChange={(val, extend) => {
            setValue(val)
            console.log('onChange', val, extend.items)
          }}
        />
      </DemoBlock>

      <DemoBlock title='自定义高度' padding='0'>
        <CascaderView options={options} style={{ '--height': '320px' }} />
      </DemoBlock>

      <DemoBlock title='不同层级中存在 value 重复的选项' padding='0'>
        <CascaderView
          options={sameValueOptions}
          onChange={(val, ext) => {
            console.log(val, ext.items)
          }}
        />
      </DemoBlock>
    </>
  )
}


//DATA JSON  export const options = [
  {
    label: '浙江',
    value: '浙江',
    children: [
      {
        label: '杭州',
        value: '杭州',
        children: [
          {
            label: '西湖区',
            value: '西湖区',
          },
          {
            label: '上城区',
            value: '上城区',
          },
          {
            label: '余杭区',
            value: '余杭区',
            disabled: true,
          },
        ],
      },
      {
        label: '温州',
        value: '温州',
        children: [
          {
            label: '鹿城区',
            value: '鹿城区',
          },
          {
            label: '龙湾区',
            value: '龙湾区',
            disabled: true,
          },
          {
            label: '瓯海区',
            value: '瓯海区',
          },
        ],
      },
      {
        label: '宁波',
        value: '宁波',
        children: [
          {
            label: '海曙区',
            value: '海曙区',
          },
          {
            label: '江北区',
            value: '江北区',
          },
          {
            label: '镇海区',
            value: '镇海区',
          },
        ],
      },
    ],
  },
  {
    label: '安徽',
    value: '安徽',
    children: [
      {
        label: '合肥',
        value: '合肥',
        children: [
          {
            label: '包河区',
            value: '包河区',
          },
          {
            label: '蜀山区',
            value: '蜀山区',
          },
          {
            label: '瑶海区',
            value: '瑶海区',
          },
        ],
      },
      {
        label: '芜湖',
        value: '芜湖',
        children: [
          {
            label: '镜湖区',
            value: '镜湖区',
          },
          {
            label: '弋江区',
            value: '弋江区',
          },
          {
            label: '湾沚区',
            value: '湾沚区',
          },
        ],
      },
    ],
  },
  {
    label: '江苏',
    value: '江苏',
    children: [
      {
        label: '南京',
        value: '南京',
        children: [
          {
            label: '玄武区',
            value: '玄武区',
          },
          {
            label: '秦淮区',
            value: '秦淮区',
          },
          {
            label: '建邺区',
            value: '建邺区',
          },
        ],
      },
      {
        label: '苏州',
        value: '苏州',
        children: [
          {
            label: '虎丘区',
            value: '虎丘区',
          },
          {
            label: '吴中区',
            value: '吴中区',
          },
          {
            label: '相城区',
            value: '相城区',
          },
        ],
      },
    ],
  },
]

export const longOptions = new Array(20).fill('').map((value, index) => ({
  label: '标题 ' + (index + 1),
  value: '' + (index + 1),
  children: new Array(20).fill('').map((value_, index_) => ({
    label: `标题 ${index + 1}/${index_ + 1}`,
    value: `${index + 1}/${index_ + 1}`,
    children: new Array(20).fill('').map((value__, index__) => ({
      label: `标题 ${index + 1}/${index_ + 1}/${index__ + 1}`,
      value: `${index + 1}/${index_ + 1}/${index__ + 1}`,
    })),
  })),
}))

export const sameValueOptions = [
  {
    label: '左转',
    value: '左转',
    children: [
      {
        label: '左转',
        value: '左转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
      {
        label: '右转',
        value: '右转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
    ],
  },
  {
    label: '右转',
    value: '右转',
    children: [
      {
        label: '左转',
        value: '左转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
      {
        label: '右转',
        value: '右转',
        children: [
          {
            label: '左转',
            value: '左转',
          },
          {
            label: '右转',
            value: '右转',
          },
        ],
      },
    ],
  },
]


///CheckList 


import React from 'react'
import { CheckList } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { SmileOutline } from 'antd-mobile-icons'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <CheckList defaultValue={['B']}>
          <CheckList.Item value='A'>A</CheckList.Item>
          <CheckList.Item value='B'>B</CheckList.Item>
          <CheckList.Item value='C' disabled>
            C
          </CheckList.Item>
          <CheckList.Item value='D' readOnly>
            D
          </CheckList.Item>
        </CheckList>
      </DemoBlock>

      <DemoBlock title='多选' padding='0'>
        <CheckList multiple defaultValue={['B', 'C']}>
          <CheckList.Item value='A'>A</CheckList.Item>
          <CheckList.Item value='B'>B</CheckList.Item>
          <CheckList.Item value='C'>C</CheckList.Item>
        </CheckList>
      </DemoBlock>

      <DemoBlock title='自定义选中图标' padding='0'>
        <CheckList activeIcon={<SmileOutline />} defaultValue={['B']}>
          <CheckList.Item value='A'>A</CheckList.Item>
          <CheckList.Item value='B'>B</CheckList.Item>
          <CheckList.Item value='C'>C</CheckList.Item>
        </CheckList>
      </DemoBlock>

      <DemoBlock title='整组只读' padding='0'>
        <CheckList defaultValue={['B']} readOnly>
          <CheckList.Item value='A'>A</CheckList.Item>
          <CheckList.Item value='B'>B</CheckList.Item>
        </CheckList>
      </DemoBlock>

      <DemoBlock title='整组禁用' padding='0'>
        <CheckList disabled>
          <CheckList.Item value='A'>A</CheckList.Item>
          <CheckList.Item value='B'>B</CheckList.Item>
        </CheckList>
      </DemoBlock>
    </>
  )
}


// SPMALE2 import React, { useMemo, useState } from 'react'
import { Button, CheckList, Popup, SearchBar, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'
import styles from './demo2.less'

const items = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']

export default () => {
  const [visible, setVisible] = useState(true)
  const [selected, setSelected] = useState('A')
  const [searchText, setSearchText] = useState('')
  const filteredItems = useMemo(() => {
    if (searchText) {
      return items.filter(item => item.includes(searchText))
    } else {
      return items
    }
  }, [items, searchText])

  return (
    <DemoBlock title='Popup + SearchBar + CheckList 组合使用'>
      <Space align='center'>
        <Button
          onClick={() => {
            setVisible(true)
          }}
        >
          显示面板
        </Button>
        <div>你选择了 {selected}</div>
      </Space>
      <Popup
        visible={visible}
        onMaskClick={() => {
          setVisible(false)
        }}
        destroyOnClose
      >
        <div className={styles.searchBarContainer}>
          <SearchBar
            placeholder='输入文字过滤选项'
            value={searchText}
            onChange={v => {
              setSearchText(v)
            }}
          />
        </div>
        <div className={styles.checkListContainer}>
          <CheckList
            className={styles.myCheckList}
            defaultValue={selected ? [selected] : []}
            onChange={val => {
              setSelected(val[0])
              setVisible(false)
            }}
          >
            {filteredItems.map(item => (
              <CheckList.Item key={item} value={item}>
                {item}
              </CheckList.Item>
            ))}
          </CheckList>
        </div>
      </Popup>
    </DemoBlock>
  )
}


.searchBarContainer {
  padding: 12px;
  border-bottom: solid 1px var(--adm-color-border);
}

.checkListContainer {
  height: 300px;
  overflow-y: scroll;
}

.myCheckList {
  --border-top: 0;
  --border-bottom: 0;
}








import React, { useState } from 'react'
import { Checkbox, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Space direction='vertical'>
          <div
            onClick={() => {
              console.log('点击了')
            }}
          >
            <Checkbox />
          </div>
          <Checkbox>有描述的复选框</Checkbox>
        </Space>
      </DemoBlock>

      <DemoBlock title='默认选中'>
        <Checkbox defaultChecked>默认选中</Checkbox>
      </DemoBlock>

      <DemoBlock title='占满整行宽度'>
        <Space direction='vertical' block>
          <Checkbox block>块级元素</Checkbox>
          <Checkbox>非块级元素</Checkbox>
        </Space>
      </DemoBlock>

      <DemoBlock title='全选和半选'>
        <DemoIndeterminate />
      </DemoBlock>
    </>
  )
}

const DemoIndeterminate = () => {
  const items = ['Apple', 'Orange', 'Banana']
  const [value, setValue] = useState(['Apple'])
  return (
    <Space direction='vertical'>
      <Checkbox
        indeterminate={value.length > 0 && value.length < items.length}
        checked={value.length === items.length}
        onChange={checked => {
          if (checked) {
            setValue(items)
          } else {
            setValue([])
          }
        }}
      >
        半选
      </Checkbox>
      <Checkbox.Group
        value={value}
        onChange={v => {
          setValue(v as string[])
        }}
      >
        <Space direction='vertical'>
          {items.map(item => (
            <Checkbox key={item} value={item}>
              {item}
            </Checkbox>
          ))}
        </Space>
      </Checkbox.Group>
    </Space>
  )
}










import React, { useState } from 'react'
import { Checkbox, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { SmileFill, SmileOutline } from 'antd-mobile-icons'

export default () => {
  const [value, setValue] = useState<string[]>([])
  return (
    <>
      <DemoBlock title='自定义图标'>
        <Checkbox
          value='banana'
          icon={checked =>
            checked ? (
              <SmileFill style={{ color: 'var(--adm-color-primary)' }} />
            ) : (
              <SmileOutline style={{ color: 'var(--adm-color-weak)' }} />
            )
          }
        >
          自定义图标
        </Checkbox>
      </DemoBlock>

      <DemoBlock title='自定义大小'>
        <Checkbox
          style={{
            '--icon-size': '18px',
            '--font-size': '14px',
            '--gap': '6px',
          }}
        >
          小号的复选框
        </Checkbox>
      </DemoBlock>

      <DemoBlock title='禁用状态'>
        <Checkbox defaultChecked disabled>
          禁用状态
        </Checkbox>
      </DemoBlock>

      <DemoBlock title='复选框组'>
        <Checkbox.Group
          value={value}
          onChange={val => {
            setValue(val as string[])
          }}
        >
          <Space direction='vertical'>
            <Checkbox value='apple'>苹果</Checkbox>
            <Checkbox value='orange'>橘子</Checkbox>
            <Checkbox value='banana'>香蕉</Checkbox>
          </Space>
        </Checkbox.Group>
      </DemoBlock>

      <DemoBlock title='复选框组禁用'>
        <Checkbox.Group defaultValue={['orange', 'banana']} disabled>
          <Space direction='vertical'>
            <Checkbox value='apple'>苹果</Checkbox>
            <Checkbox value='orange'>橘子</Checkbox>
            <Checkbox value='banana'>香蕉</Checkbox>
          </Space>
        </Checkbox.Group>
      </DemoBlock>
    </>
  )
}



import React, { FC, PropsWithChildren, useRef } from 'react'
import { Checkbox, List } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { CheckboxRef } from '../checkbox'

const items = ['Apple', 'Orange', 'Banana']

const ListItemWithCheckbox: FC<
  PropsWithChildren<{
    item: string
  }>
> = props => {
  const checkboxRef = useRef<CheckboxRef>(null)
  return (
    <List.Item
      prefix={
        <div onClick={e => e.stopPropagation()}>
          <Checkbox value={props.item} ref={checkboxRef} />
        </div>
      }
      onClick={() => {
        checkboxRef.current?.toggle()
      }}
      arrow={false}
    >
      {props.item}
    </List.Item>
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='配合 List 使用' padding='0'>
        <Checkbox.Group>
          <List>
            {items.map(item => (
              <ListItemWithCheckbox key={item} item={item} />
            ))}
          </List>
        </Checkbox.Group>
      </DemoBlock>
    </>
  )
}











import React, { RefObject } from 'react'
import {
  Form,
  Input,
  Button,
  Dialog,
  TextArea,
  DatePicker,
  Selector,
  Slider,
  Stepper,
  Switch,
} from 'antd-mobile'
import dayjs from 'dayjs'
import type { DatePickerRef } from 'antd-mobile/es/components/date-picker'

export default () => {
  const onFinish = (values: any) => {
    Dialog.alert({
      content: <pre>{JSON.stringify(values, null, 2)}</pre>,
    })
  }

  return (
    <>
      <Form
        layout='horizontal'
        footer={
          <Button block type='submit' color='primary' size='large'>
            提交
          </Button>
        }
      >
        <Form.Header>水平布局表单</Form.Header>
        <Form.Item
          name='name'
          label='姓名'
          rules={[{ required: true, message: '姓名不能为空' }]}
        >
          <Input onChange={console.log} placeholder='请输入姓名' />
        </Form.Item>
        <Form.Item name='address' label='地址' help='详情地址'>
          <TextArea
            placeholder='请输入地址'
            maxLength={100}
            rows={2}
            showCount
          />
        </Form.Item>
        <Form.Item name='amount' label='数量' childElementPosition='right'>
          <Stepper />
        </Form.Item>
        <Form.Item
          name='delivery'
          label='送货上门'
          childElementPosition='right'
        >
          <Switch />
        </Form.Item>
      </Form>

      <Form
        name='form'
        onFinish={onFinish}
        footer={
          <Button block type='submit' color='primary' size='large'>
            提交
          </Button>
        }
      >
        <Form.Header>竖直布局表单</Form.Header>
        <Form.Item name='name' label='姓名' rules={[{ required: true }]}>
          <Input placeholder='请输入姓名' />
        </Form.Item>
        <Form.Item name='address' label='地址' help='详情地址'>
          <Input placeholder='请输入地址' />
        </Form.Item>
        <Form.Item
          name='birthday'
          label='生日'
          trigger='onConfirm'
          onClick={(e, datePickerRef: RefObject<DatePickerRef>) => {
            datePickerRef.current?.open()
          }}
        >
          <DatePicker>
            {value =>
              value ? dayjs(value).format('YYYY-MM-DD') : '请选择日期'
            }
          </DatePicker>
        </Form.Item>
        <Form.Item name='favoriteFruits' label='喜爱的水果'>
          <Selector
            columns={3}
            multiple
            options={[
              { label: '苹果', value: 'apple' },
              { label: '橘子', value: 'orange' },
              { label: '香蕉', value: 'banana' },
            ]}
          />
        </Form.Item>
        <Form.Item name='slider-demo' label='滑块选择'>
          <Slider ticks step={10} />
        </Form.Item>
        <Form.Item
          initialValue={0}
          rules={[
            {
              max: 5,
              min: 1,
              type: 'number',
            },
          ]}
          name='stepper-demo'
          label='数量'
        >
          <Stepper />
        </Form.Item>
        <Form.Item name='disabledField' label='禁用' disabled>
          <Input placeholder='禁止输入' />
        </Form.Item>
      </Form>
    </>
  )
}








import React from 'react'
import { Form, Input } from 'antd-mobile'

export default function () {
  return (
    <>
      <Form layout='horizontal' mode='card'>
        <Form.Header>卡片模式及分组</Form.Header>
        <Form.Item label='手机号'>
          <Input placeholder='请输入' />
        </Form.Item>
        <Form.Item label='短信验证码'>
          <Input placeholder='请输入' />
        </Form.Item>
        <Form.Header />
        <Form.Item label='姓名'>
          <Input placeholder='请输入' />
        </Form.Item>
        <Form.Item label='邮箱地址'>
          <Input placeholder='请输入' />
        </Form.Item>
        <Form.Item label='所在城市'>
          <Input placeholder='请输入' />
        </Form.Item>
        <Form.Header />
      </Form>
      <Form layout='horizontal' mode='card'>
        <Form.Header>带辅助操作</Form.Header>
        <Form.Item label='短信验证码' extra={<a>发送验证码</a>}>
          <Input placeholder='请输入' />
        </Form.Item>
      </Form>
    </>
  )
}








import React from 'react'
import { Form, Input } from 'antd-mobile'

export default () => {
  return (
    <>
      <div style={{ padding: '16px', fontSize: '15px', color: '#697b8c' }}>
        三种必选填方式
      </div>
      <Form requiredMarkStyle='asterisk'>
        <Form.Header>星号</Form.Header>
        <Form.Item name='name' label='姓名' rules={[{ required: true }]}>
          <Input placeholder='请输入姓名' />
        </Form.Item>
        <Form.Item name='address' label='地址' help='详情地址'>
          <Input placeholder='请输入地址' />
        </Form.Item>
      </Form>
      <Form requiredMarkStyle='text-required'>
        <Form.Header>文字-必填</Form.Header>
        <Form.Item name='name' label='姓名' rules={[{ required: true }]}>
          <Input placeholder='请输入姓名' />
        </Form.Item>
        <Form.Item name='address' label='地址' help='详情地址'>
          <Input placeholder='请输入地址' />
        </Form.Item>
      </Form>
      <Form requiredMarkStyle='text-optional'>
        <Form.Header>文字-选填</Form.Header>
        <Form.Item name='name' label='姓名' rules={[{ required: true }]}>
          <Input placeholder='请输入姓名' />
        </Form.Item>
        <Form.Item name='address' label='地址' help='详情地址'>
          <Input placeholder='请输入地址' />
        </Form.Item>
      </Form>
      <Form requiredMarkStyle='none'>
        <Form.Header>不展示必填标识</Form.Header>
        <Form.Item name='name' label='姓名' rules={[{ required: true }]}>
          <Input placeholder='请输入姓名' />
        </Form.Item>
        <Form.Item name='address' label='地址' help='详情地址'>
          <Input placeholder='请输入地址' />
        </Form.Item>
      </Form>
    </>
  )
}








import React, { useState } from 'react'
import {
  Form,
  Input,
  Button,
  Dialog,
  Checkbox,
  Space,
  DatePicker,
} from 'antd-mobile'
import { FormInstance } from 'antd-mobile/es/components/form'
import dayjs from 'dayjs'
import { CloseCircleFill } from 'antd-mobile-icons'

export default () => {
  const [form] = Form.useForm()
  const onSubmit = () => {
    const values = form.getFieldsValue()
    Dialog.alert({
      content: <pre>{JSON.stringify(values, null, 2)}</pre>,
    })
  }

  return (
    <>
      <Form
        form={form}
        initialValues={{
          a: 'aaa',
          b: [],
        }}
        footer={
          <Button block color='primary' onClick={onSubmit} size='large'>
            提交
          </Button>
        }
      >
        <Form.Header>复杂逻辑</Form.Header>
        <Form.Item name='a' label='字段A'>
          <Input placeholder='请输入' />
        </Form.Item>
        <Form.Item name='b' label='字段B' required>
          <Checkbox.Group>
            <Space direction='vertical'>
              <Checkbox value='1'>选项1</Checkbox>
              <Checkbox value='2'>选项2</Checkbox>
              <Checkbox value='3' disabled>
                选项3
              </Checkbox>
            </Space>
          </Checkbox.Group>
        </Form.Item>
        <Form.Item
          label='表单联动-字段B'
          shouldUpdate={(prevValues, curValues) => {
            return prevValues.b !== curValues.b
          }}
        >
          {({ getFieldValue }) => {
            return JSON.stringify(getFieldValue('b'))
          }}
        </Form.Item>
        <DatePickerInputItem />
      </Form>

      <RefDemo />
      <WarningOnlyDemo />
    </>
  )
}

class RefDemo extends React.Component {
  formRef = React.createRef<FormInstance>()

  componentDidMount() {
    this.formRef.current?.setFieldsValue({ a: 'antd mobile', b: '2' })
  }

  render() {
    return (
      <Form
        ref={this.formRef}
        layout='horizontal'
        footer={
          <Button
            block
            color='primary'
            onClick={() => {
              this.formRef.current?.resetFields()
            }}
            size='large'
          >
            重置
          </Button>
        }
      >
        <Form.Header>表单方法调用（Class component）</Form.Header>
        <Form.Item
          name='a'
          label='字段A'
          rules={[{ required: true, message: '字段A不能为空' }]}
        >
          <Input placeholder='请输入字段A' />
        </Form.Item>
        <Form.Item name='b' label='字段B' required>
          <Checkbox.Group>
            <Space direction='vertical'>
              <Checkbox value='1'>选项1</Checkbox>
              <Checkbox value='2'>选项2</Checkbox>
              <Checkbox value='3'>选项3</Checkbox>
            </Space>
          </Checkbox.Group>
        </Form.Item>
      </Form>
    )
  }
}

const DatePickerInputItem = () => {
  const [pickerVisible, setPickerVisible] = useState(false)

  return (
    <Form.Item
      noStyle
      shouldUpdate={(prevValues, curValues) =>
        prevValues.birthday !== curValues.birthday
      }
    >
      {({ getFieldValue, setFieldsValue }) => (
        <Form.Item
          name='birthday'
          label='带清除图标的时间选择器'
          trigger='onConfirm'
          arrow={
            getFieldValue('birthday') ? (
              <CloseCircleFill
                style={{
                  color: 'var(--adm-color-light)',
                  fontSize: 14,
                }}
                onClick={e => {
                  e.stopPropagation()
                  setFieldsValue({ birthday: null })
                }}
              />
            ) : (
              true
            )
          }
          onClick={() => {
            setPickerVisible(true)
          }}
        >
          <DatePicker
            visible={pickerVisible}
            onClose={() => {
              setPickerVisible(false)
            }}
          >
            {value =>
              value ? dayjs(value).format('YYYY-MM-DD') : '请选择日期'
            }
          </DatePicker>
        </Form.Item>
      )}
    </Form.Item>
  )
}

const WarningOnlyDemo = () => {
  const onFinish = (values: any) => {
    console.log(values)
  }

  return (
    <Form
      onFinish={onFinish}
      footer={
        <Button block type='submit' color='primary' size='large'>
          提交
        </Button>
      }
    >
      <Form.Header>非阻塞校验</Form.Header>
      <Form.Item
        name='email'
        label='邮箱'
        rules={[
          { required: true },
          { type: 'string', min: 6 },
          { type: 'email', warningOnly: true },
        ]}
      >
        <Input placeholder='请输入邮箱' />
      </Form.Item>
    </Form>
  )
}











import React, { useState } from 'react'
import { Button, Picker, Space } from 'antd-mobile'
import type { PickerColumn } from 'antd-mobile/es/components/picker'
import { DemoBlock, DemoDescription } from 'demos'
import { basicColumns } from './columns-data'
import { mockRequest } from './mockRequest'

export default function () {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <DemoBlock title='自定义样式'>
        <Space direction='vertical' block>
          <Button
            onClick={() => {
              setVisible(true)
            }}
          >
            选择
          </Button>
          <DemoDescription>
            你可以通过 CSS 变量对 Picker 的字号等进行自定义，CascadePicker 和
            DatePicker 也同样支持自定义样式。
          </DemoDescription>
        </Space>
        <Picker
          style={{
            '--title-font-size': '13px',
            '--header-button-font-size': '13px',
            '--item-font-size': '13px',
            '--item-height': '30px',
          }}
          defaultValue={['Wed', 'pm']}
          columns={basicColumns}
          visible={visible}
          onClose={() => {
            setVisible(false)
          }}
        />
      </DemoBlock>
      <DemoBlock title='懒加载数据'>
        <LazyLoadColumnsDemo />
      </DemoBlock>
    </>
  )
}

function LazyLoadColumnsDemo() {
  const [visible, setVisible] = useState(false)
  const [columns, setColumns] = useState<PickerColumn[]>([])
  const [loading, setLoading] = useState(true)

  const handleClick = async () => {
    setVisible(true)
    if (!columns.length) {
      const data = await mockRequest({ delay: 2000 })
      setColumns(data)
      setLoading(false)
    }
  }

  return (
    <>
      <Space direction='vertical' block>
        <Button onClick={handleClick}>懒加载数据</Button>
        <DemoDescription>
          你可以在 Picker
          显示时发起异步请求获取数据，默认提供了转圈加载中的加载效果，CascadePicker
          和 DatePicker 同样支持，你也可以传入 loadingContent 自定义 loading
          样式。
        </DemoDescription>
      </Space>
      <Picker
        loading={loading}
        columns={columns}
        visible={visible}
        onClose={() => {
          setVisible(false)
        }}
      />
    </>
  )
}





export const basicColumns = [
  [
    { label: '周一', value: 'Mon' },
    { label: '周二', value: 'Tues' },
    { label: '周三', value: 'Wed' },
    { label: '周四', value: 'Thur' },
    { label: '周五', value: 'Fri' },
  ],
  [
    { label: '上午', value: 'am' },
    { label: '下午', value: 'pm' },
  ],
]


import { basicColumns } from './columns-data'
import { sleep } from 'antd-mobile/es/utils/sleep'

export async function mockRequest({ delay }: { delay: number }) {
  await sleep(delay)
  return basicColumns
}










import React, { useState } from 'react'
import { PickerView } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { basicColumns } from './columns-data'

export default () => {
  const [value, setValue] = useState<(string | null)[]>(['Mon', 'am'])

  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <PickerView columns={basicColumns} />
      </DemoBlock>

      <DemoBlock title='自定义高度' padding='0'>
        <PickerView
          columns={basicColumns}
          style={{ '--height': '500px', '--item-height': '2.8rem' }}
        />
      </DemoBlock>

      <DemoBlock title='受控模式' padding='0'>
        <PickerView
          columns={basicColumns}
          value={value}
          onChange={(val, extend) => {
            setValue(val)
            console.log('onChange', val, extend.items)
          }}
        />
      </DemoBlock>

      <DemoBlock title='通过鼠标滚轮进行选择' padding='0'>
        <PickerView columns={basicColumns} mouseWheel={true} />
      </DemoBlock>
    </>
  )
}










import React, { useRef } from 'react'
import { Button, SearchBar, Space, Toast } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { SearchBarRef } from 'antd-mobile/es/components/search-bar'

export default () => {
  const searchRef = useRef<SearchBarRef>(null)

  return (
    <>
      <DemoBlock title='基础用法'>
        <SearchBar placeholder='请输入内容' />
      </DemoBlock>

      <DemoBlock title='获取焦点后显示取消按钮'>
        <SearchBar placeholder='请输入内容' showCancelButton />
      </DemoBlock>

      <DemoBlock title='取消按钮长显'>
        <SearchBar placeholder='请输入内容' showCancelButton={() => true} />
      </DemoBlock>

      <DemoBlock title='事件监听和 Ref'>
        <Space block direction='vertical'>
          <SearchBar
            ref={searchRef}
            placeholder='请输入内容'
            showCancelButton
            onSearch={val => {
              Toast.show(`你搜索了：${val}`)
            }}
            onFocus={() => {
              Toast.show('获得焦点')
            }}
            onBlur={() => {
              Toast.show('失去焦点')
            }}
            onClear={() => {
              Toast.show('清空内容')
            }}
            onCancel={() => {
              Toast.show('取消搜索')
            }}
          />
          <Space>
            <Button
              onClick={() => {
                searchRef.current?.clear()
              }}
            >
              清空内容
            </Button>
            <Button
              onClick={() => {
                searchRef.current?.focus()
              }}
            >
              激活
            </Button>
          </Space>
        </Space>
      </DemoBlock>
    </>
  )
}









import React from 'react'
import { Selector, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { options } from './options'

export default () => {
  return (
    <>
      <DemoBlock title='单选'>
        <Selector
          options={options}
          defaultValue={['1']}
          onChange={(arr, extend) => console.log(arr, extend.items)}
        />
      </DemoBlock>

      <DemoBlock title='多选'>
        <Selector
          options={options}
          defaultValue={['2', '3']}
          multiple={true}
          onChange={(arr, extend) => console.log(arr, extend.items)}
        />
      </DemoBlock>

      <DemoBlock title='两列布局'>
        <Selector
          columns={2}
          options={options}
          defaultValue={['2', '3']}
          multiple={true}
        />
      </DemoBlock>

      <DemoBlock title='三列布局'>
        <Selector
          columns={3}
          options={options}
          defaultValue={['2', '3']}
          multiple={true}
        />
      </DemoBlock>

      <DemoBlock title='禁用状态'>
        <Space block direction='vertical'>
          <Selector options={options} defaultValue={['1']} disabled={true} />
          <Selector
            options={[
              {
                label: '选项一',
                value: '1',
              },
              {
                label: '选项二',
                value: '2',
                disabled: true,
              },
              {
                label: '选项三',
                value: '3',
              },
            ]}
            defaultValue={['3']}
          />
        </Space>
      </DemoBlock>
    </>
  )
}



export const options = [
  {
    label: '选项一',
    value: '1',
  },
  {
    label: '选项二',
    value: '2',
  },
  {
    label: '选项三',
    value: '3',
  },
]



import React from 'react'
import { Slider, Toast } from 'antd-mobile'
import { DemoBlock } from 'demos'

const marks = {
  0: 0,
  20: 20,
  40: 40,
  60: 60,
  80: 80,
  100: 100,
}

export default () => {
  const toastValue = (value: number | number[]) => {
    let text = ''
    if (typeof value === 'number') {
      text = `${value}`
    } else {
      text = `[${value.join(',')}]`
    }
    Toast.show(`当前选中值为：${text}`)
    console.log(value)
  }

  return (
    <>
      <DemoBlock title='基础用法'>
        <Slider onAfterChange={toastValue} />
      </DemoBlock>

      <DemoBlock title='显示刻度并指定步距'>
        <Slider ticks step={10} />
      </DemoBlock>

      <DemoBlock title='传入刻度标记'>
        <Slider marks={marks} ticks />
      </DemoBlock>

      <DemoBlock title='最大/最小值'>
        <Slider
          step={100}
          min={100}
          max={1000}
          ticks
          onAfterChange={toastValue}
        />
      </DemoBlock>

      <DemoBlock title='默认值'>
        <Slider step={20} defaultValue={40} />
      </DemoBlock>

      <DemoBlock title='在拖动时显示悬浮提示'>
        <Slider step={20} defaultValue={60} popover />
      </DemoBlock>
    </>
  )
}








import React from 'react'
import { Stepper } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  const [value, setValue] = React.useState('9999999999999999')

  return (
    <>
      <DemoBlock title='stringMode'>
        <Stepper
          style={{ width: '100%' }}
          stringMode
          defaultValue='0.000000000000002'
          step='0.000000000000001'
          onChange={console.log}
        />
      </DemoBlock>

      <DemoBlock title='stringMode control'>
        <Stepper
          style={{ width: '100%' }}
          stringMode
          value={value}
          step='13579'
          onChange={setValue}
        />
      </DemoBlock>
    </>
  )
}







import React from 'react'
import { Stepper, Toast } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='禁用状态'>
        <Stepper disabled />
      </DemoBlock>

      <DemoBlock title='输入框只读状态'>
        <Stepper inputReadOnly />
      </DemoBlock>

      <DemoBlock title='自定义宽度'>
        <Stepper style={{ width: '120px' }} defaultValue={10000} step={10000} />
      </DemoBlock>

      <DemoBlock title='获得/失去焦点'>
        <Stepper
          onFocus={() => {
            Toast.show('获得焦点')
          }}
          onBlur={() => {
            Toast.show('失去焦点')
          }}
        />
      </DemoBlock>

      <DemoBlock title='允许清空'>
        <Stepper
          allowEmpty={true}
          min={10}
          max={20}
          onChange={value => {
            console.log(value)
          }}
        />
      </DemoBlock>

      <DemoBlock title='自定义css变量'>
        <Stepper
          style={{
            '--border': '1px solid #f5f5f5',
            '--border-inner': 'none',
            '--height': '36px',
            '--input-width': '70px',
            '--input-background-color': 'var(--adm-color-background)',
            '--active-border': '1px solid #1677ff',
          }}
          defaultValue={10000}
          step={10000}
        />
      </DemoBlock>
    </>
  )
}







import React from 'react'
import { Stepper } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Stepper
          defaultValue={1}
          onChange={value => {
            console.log(value)
          }}
        />
      </DemoBlock>

      <DemoBlock title='步长设置'>
        <Stepper step={10} defaultValue={10} />
      </DemoBlock>

      <DemoBlock title='限制输入范围'>
        <Stepper min={-5} max={5} />
      </DemoBlock>

      <DemoBlock title='格式化到整数'>
        <Stepper digits={0} />
      </DemoBlock>

      <DemoBlock title='格式化到一位小数'>
        <Stepper digits={1} />
      </DemoBlock>

      <DemoBlock title='自定义格式'>
        <Stepper
          defaultValue={93}
          formatter={value => `$ ${value}`}
          parser={text => parseFloat(text.replace('$', ''))}
          onChange={value => {
            console.log(value, typeof value)
          }}
        />
      </DemoBlock>
    </>
  )
}








import React from 'react'
import { Space, Switch } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { CloseOutline, CheckOutline } from 'antd-mobile-icons'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Switch />
      </DemoBlock>

      <DemoBlock title='有默认值'>
        <Switch defaultChecked />
      </DemoBlock>

      <DemoBlock title='文字和图标'>
        <Space wrap>
          <Switch uncheckedText='关' checkedText='开' />
          <Switch
            checkedText={<CheckOutline fontSize={18} />}
            uncheckedText={<CloseOutline fontSize={18} />}
          />
          <Switch uncheckedText='0' checkedText='1' />
        </Space>
      </DemoBlock>

      <DemoBlock title='自定义样式'>
        <Switch
          defaultChecked
          style={{
            '--checked-color': '#00b578',
            '--height': '36px',
            '--width': '60px',
          }}
        />
      </DemoBlock>
    </>
  )
}











import React, { useState } from 'react'
import { TextArea } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  const [value, setValue] = useState('')
  return (
    <>
      <DemoBlock title='基本的输入框组件'>
        <TextArea
          placeholder='请输入内容'
          value={value}
          onChange={val => {
            setValue(val)
          }}
        />
      </DemoBlock>

      <DemoBlock title='指定行数'>
        <TextArea placeholder='请输入内容' rows={5} />
      </DemoBlock>

      <DemoBlock title='根据内容自动调整高度'>
        <TextArea
          placeholder='请输入内容'
          autoSize={{ minRows: 3, maxRows: 5 }}
        />
      </DemoBlock>

      <DemoBlock title='字数统计'>
        <TextArea defaultValue={'北极星垂地，\n东山月满川。'} showCount />
      </DemoBlock>

      <DemoBlock title='字数限制'>
        <TextArea
          defaultValue={'北极星垂地，\n东山月满川。'}
          showCount
          maxLength={30}
        />
      </DemoBlock>

      <DemoBlock title='禁用状态'>
        <TextArea
          placeholder='请输入内容'
          value={'北极星垂地，\n东山月满川。'}
          disabled
        />
      </DemoBlock>

      <DemoBlock title='只读状态'>
        <TextArea
          placeholder='请输入内容'
          value={'北极星垂地，\n东山月满川。'}
          readOnly
        />
      </DemoBlock>
    </>
  )
}









import React, { useState, useRef } from 'react'
import { ActionSheet, Button, Dialog, Space, Toast } from 'antd-mobile'
import { DemoBlock } from 'demos'
import type {
  Action,
  ActionSheetShowHandler,
} from 'antd-mobile/es/components/action-sheet'

const actions: Action[] = [
  { text: '复制', key: 'copy' },
  { text: '修改', key: 'edit' },
  { text: '保存', key: 'save' },
]

// 基础用法
function Basic() {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button onClick={() => setVisible(true)}>最简单的用法</Button>
      <ActionSheet
        visible={visible}
        actions={actions}
        onClose={() => setVisible(false)}
      />
    </>
  )
}

function WithCancelButtonAndDescription() {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button onClick={() => setVisible(true)}>取消按钮和额外描述</Button>
      <ActionSheet
        extra='请选择你要进行的操作'
        cancelText='取消'
        visible={visible}
        actions={actions}
        onClose={() => setVisible(false)}
      />
    </>
  )
}

// 选项状态
function ConfigActions() {
  const actions: Action[] = [
    { text: '复制', key: 'copy' },
    { text: '修改', key: 'edit', disabled: true },
    {
      text: '删除',
      key: 'delete',
      description: '删除后数据不可恢复',
      danger: true,
      bold: true,
    },
  ]

  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button onClick={() => setVisible(true)}>禁用和危险的选项</Button>
      <ActionSheet
        visible={visible}
        actions={actions}
        onClose={() => setVisible(false)}
      />
    </>
  )
}

// 事件处理
function Events() {
  const actions: Action[] = [
    { text: '复制', key: 'copy' },
    { text: '修改', key: 'edit' },
    {
      text: '保存',
      key: 'save',
      onClick: async () => {
        const result = await Dialog.confirm({ content: '确定要保存吗？' })
        if (result) {
          Toast.show('执行了保存操作')
        }
      },
    },
  ]

  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button onClick={() => setVisible(true)}>事件处理</Button>
      <ActionSheet
        visible={visible}
        actions={actions}
        onClose={() => setVisible(false)}
        onAction={action => {
          if (action.key === 'edit' || action.key === 'copy') {
            Toast.show(`点击了${action.text}`)
          }
        }}
        afterClose={() => {
          Toast.show('动作面板已关闭')
        }}
      />
    </>
  )
}

// 指令式
function Imperative() {
  const handler = useRef<ActionSheetShowHandler>()
  const actions: Action[] = [
    {
      text: '复制',
      key: 'copy',
    },
    {
      text: '修改',
      key: 'edit',
      onClick: () => {
        handler.current?.close()
      },
    },
  ]

  return (
    <Button
      onClick={() => {
        handler.current = ActionSheet.show({
          actions,
          onClose: () => {
            Toast.show('动作面板关闭')
          },
        })
      }}
    >
      显示
    </Button>
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Space wrap>
          <Basic />
          <WithCancelButtonAndDescription />
        </Space>
      </DemoBlock>

      <DemoBlock title='选项状态'>
        <ConfigActions />
      </DemoBlock>

      <DemoBlock title='事件处理'>
        <Events />
      </DemoBlock>

      <DemoBlock title='指令式'>
        <Imperative />
      </DemoBlock>
    </>
  )
}






import React from 'react'
import { Button, Dialog, Space, Toast, Divider } from 'antd-mobile'
import { DemoBlock, DemoDescription, sleep } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Space direction='vertical' block>
          <Button
            block
            onClick={() =>
              Dialog.alert({
                content: '人在天边月上明',
                onConfirm: () => {
                  console.log('Confirmed')
                },
              })
            }
          >
            最简单的小对话框
          </Button>
          <Button
            block
            onClick={() => {
              Dialog.alert({
                content: '点击遮罩关闭',
                closeOnMaskClick: true,
              })
            }}
          >
            点击遮罩关闭
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='操作按钮'>
        <Space direction='vertical' block>
          <Button
            block
            onClick={() => {
              Dialog.show({
                content: '人在天边月上明，风初紧，吹入画帘旌',
                closeOnAction: true,
                actions: [
                  {
                    key: 'online',
                    text: '在线阅读',
                  },
                  {
                    key: 'download',
                    text: '下载文件',
                  },
                  [
                    {
                      key: 'cancel',
                      text: '取消',
                    },
                    {
                      key: 'delete',
                      text: '删除',
                      bold: true,
                      danger: true,
                    },
                  ],
                ],
              })
            }}
          >
            自定义按钮
          </Button>
          <DemoDescription content='如果你想完全自由地控制按钮区域，那么可以通过 actions 参数来自定义操作按钮，当传入一个二级数组时，可以在同一行内并排放置多个按钮' />
          <Divider />
          <Button
            block
            onClick={() =>
              Dialog.confirm({
                content: '是否提交申请',
                onConfirm: async () => {
                  await sleep(3000)
                  Toast.show({
                    icon: 'success',
                    content: '提交成功',
                    position: 'bottom',
                  })
                },
              })
            }
          >
            异步操作执行成功
          </Button>
          <Button
            block
            onClick={() =>
              Dialog.confirm({
                content: '是否提交申请',
                onConfirm: async () => {
                  await sleep(3000)
                  Toast.show({
                    icon: 'fail',
                    content: '提交失败',
                    position: 'bottom',
                  })
                  throw new Error()
                },
              })
            }
          >
            异步操作执行失败
          </Button>
          <DemoDescription content='onAction、onConfirm、onCancel、onClick 这些事件函数都支持返回一个 Promise，通过这种方式，可以让按钮在执行异步操作的时候变为加载状态' />
        </Space>
      </DemoBlock>
    </>
  )
}









import React, { useState, useRef } from 'react'
import { Button, Dialog, Space, Toast, Divider } from 'antd-mobile'
import { DemoBlock, DemoDescription, lorem } from 'demos'
import { DialogShowHandler } from 'antd-mobile/es/components/dialog'
import { ExclamationCircleFill } from 'antd-mobile-icons'

export default () => {
  return (
    <>
      <DemoBlock title='内容区域'>
        <Space direction='vertical' block>
          <Button
            block
            onClick={() => {
              Dialog.alert({
                header: (
                  <ExclamationCircleFill
                    style={{
                      fontSize: 64,
                      color: 'var(--adm-color-warning)',
                    }}
                  />
                ),
                title: '注意',
                content: (
                  <>
                    <div>请用手机拍摄手持工牌照，注意保持照片清晰</div>
                    <div>
                      详情说明请查阅<a>操作指引</a>
                    </div>
                  </>
                ),
              })
            }}
          >
            自定义内容区域
          </Button>
          <Button
            block
            onClick={() => {
              Dialog.alert({
                image:
                  'https://gw.alipayobjects.com/mdn/rms_efa86a/afts/img/A*SE7kRojatZ0AAAAAAAAAAAAAARQnAQ',
                title: '手持工牌照示例',
                content: '请用手机拍摄手持工牌照，注意保持照片清晰',
              })
            }}
          >
            有标题和图片
          </Button>
          <Button
            block
            onClick={() =>
              Dialog.confirm({
                title: '提示',
                content: lorem.generateParagraphs(7),
              })
            }
          >
            超长文本
          </Button>
        </Space>
      </DemoBlock>
      <DemoBlock title='获取点击结果'>
        <Space direction='vertical' block>
          <Button
            block
            onClick={async () => {
              await Dialog.alert({
                content: '人在天边月上明',
              })
              Toast.show({ content: '已关闭', position: 'bottom' })
            }}
          >
            等待 alert 完成
          </Button>
          <DemoDescription content='alert 和 confirm 方法都会返回一个 Promise，你可以通过这个 Promise 实现等待弹窗关闭' />
          <Divider />
          <Button
            block
            onClick={async () => {
              const result = await Dialog.confirm({
                content: '人在天边月上明',
              })
              if (result) {
                Toast.show({ content: '点击了确认', position: 'bottom' })
              } else {
                Toast.show({ content: '点击了取消', position: 'bottom' })
              }
            }}
          >
            等待 confirm 完成
          </Button>
          <DemoDescription content='confirm 返回的是 Promise<boolean> 你可以通过这个 boolean 来判断用户是点击的确认还是取消' />
        </Space>
      </DemoBlock>

      <DemoBlock title='声明式'>
        <Space direction='vertical' block>
          <Declarative />
          <DemoDescription content='你可以手动控制 visible 状态' />
        </Space>
      </DemoBlock>

      <DemoBlock title='自定义关闭操作'>
        <Space direction='vertical' block>
          <Imperative />
          <DemoDescription content='你可以根据需求，自定义关闭弹窗的时机' />
        </Space>
      </DemoBlock>
    </>
  )
}

// 声明式
const Declarative = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button
        block
        onClick={() => {
          setVisible(true)
        }}
      >
        显示对话框
      </Button>
      <Dialog
        visible={visible}
        content='人在天边月上明'
        closeOnAction
        onClose={() => {
          setVisible(false)
        }}
        actions={[
          {
            key: 'confirm',
            text: '我知道了',
          },
        ]}
      />
    </>
  )
}

// 自定义关闭操作
function Imperative() {
  const handler = useRef<DialogShowHandler>()

  return (
    <Button
      block
      onClick={() => {
        handler.current = Dialog.show({
          content: '人在天边月上明，风初紧，吹入画帘旌',
          actions: [
            {
              key: 'close',
              text: '关闭',
              onClick: () => {
                if (Math.random() > 0.5) {
                  handler.current?.close()
                } else {
                  Toast.show('再试一下')
                }
              },
            },
          ],
        })
      }}
    >
      显示对话框
    </Button>
  )
}


import React from 'react'
import { ErrorBlock, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='四种状态'>
        <Space block direction='vertical' style={{ '--gap': '16px' }}>
          <ErrorBlock status='default' />
          <ErrorBlock status='disconnected' />
          <ErrorBlock status='empty' />
          <ErrorBlock status='busy' />
        </Space>
      </DemoBlock>
    </>
  )
}










import React from 'react'
import { DotLoading } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='默认'>
        <DotLoading />
      </DemoBlock>

      <DemoBlock title='主题色 Loading'>
        <DotLoading color='primary' />
      </DemoBlock>

      <DemoBlock title='白色 Loading' background='#a5a5a5'>
        <DotLoading color='white' />
      </DemoBlock>

      <DemoBlock title='自动适配字号'>
        <span style={{ fontSize: 14 }}>
          <DotLoading />
        </span>
        <span style={{ fontSize: 18 }}>
          <DotLoading />
        </span>
        <span style={{ fontSize: 24 }}>
          <DotLoading />
        </span>
      </DemoBlock>

      <DemoBlock title='自动适配文本颜色'>
        <div style={{ color: '#00b578' }}>
          <DotLoading color='currentColor' />
          <span>绿色文字</span>
        </div>
        <div style={{ color: '#ff3141' }}>
          <DotLoading color='currentColor' />
          <span>红色文字</span>
        </div>
      </DemoBlock>
    </>
  )
}









import React, { useState, FC } from 'react'
import { Button, Mask, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'

import styles from './demo1.less'

// 基础用法
const Simple: FC = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button onClick={() => setVisible(true)}>显示背景蒙层</Button>
      <Mask visible={visible} onMaskClick={() => setVisible(false)} />
    </>
  )
}

// 自定义内容
const WithContent: FC = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Mask visible={visible} onMaskClick={() => setVisible(false)}>
        <div className={styles.overlayContent}>内容</div>
      </Mask>
      <Button onClick={() => setVisible(true)}>显示带内容的背景蒙层</Button>
    </>
  )
}

// 背景蒙层的颜色深度 - 深一些
const Thick: FC = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Mask
        visible={visible}
        onMaskClick={() => setVisible(false)}
        opacity='thick'
      />
      <Button onClick={() => setVisible(true)}>显示深一些的背景蒙层</Button>
    </>
  )
}

// 背景蒙层的颜色深度 - 浅一些
const Thin: FC = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Mask
        visible={visible}
        onMaskClick={() => setVisible(false)}
        opacity='thin'
      />
      <Button onClick={() => setVisible(true)}>显示浅一些的背景蒙层</Button>
    </>
  )
}

// 背景蒙层的颜色深度 - 自定义
const CustomOpacity: FC = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Mask
        visible={visible}
        onMaskClick={() => setVisible(false)}
        opacity={1}
      />
      <Button onClick={() => setVisible(true)}>
        显示自定义透明度的背景蒙层
      </Button>
    </>
  )
}

// 背景蒙层的颜色 - 自定义
const CustomColor: FC = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Mask
        visible={visible}
        onMaskClick={() => setVisible(false)}
        color='rgba(219, 10, 10, 0.5)'
      />
      <Button onClick={() => setVisible(true)}>显示自定义颜色的背景蒙层</Button>
    </>
  )
}

// 白色的背景蒙层
const White: FC = () => {
  const [visible, setVisible] = useState(false)
  return (
    <>
      <Button onClick={() => setVisible(true)}>显示白色的背景蒙层</Button>
      <Mask
        color='white'
        visible={visible}
        onMaskClick={() => setVisible(false)}
      />
    </>
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Simple />
      </DemoBlock>

      <DemoBlock title='背景蒙层的颜色深度'>
        <Space wrap>
          <Thin />
          <Thick />
          <CustomOpacity />
        </Space>
      </DemoBlock>

      <DemoBlock title='背景蒙层的颜色'>
        <White />
        <CustomColor />
      </DemoBlock>

      <DemoBlock title='自定义内容'>
        <WithContent />
      </DemoBlock>
    </>
  )
}







import React, { FC, useState } from 'react'
import { Button, Image, Popover } from 'antd-mobile'
import { CloseOutline } from 'antd-mobile-icons'
import { DemoBlock, DemoDescription } from 'demos'
import styles from './demo4.less'

const image = (
  <Image
    src='https://gw.alipayobjects.com/zos/bmw-prod/ec7a239e-a880-4acd-8563-53047b1d7e84.svg'
    style={{
      '--height': '36px',
      '--width': '36px',
    }}
  />
)

const SingleLine: FC = () => {
  const [visible, setVisible] = useState(true)

  return (
    <Popover
      content={
        <div className={styles.singleLineContent}>
          <div className={styles.imageContainer}>{image}</div>
          <div>单行文字推荐关闭按钮居中</div>
          <div
            className={styles.closeIcon}
            onClick={() => {
              setVisible(false)
            }}
          >
            <CloseOutline />
          </div>
        </div>
      }
      placement='bottom-start'
      mode='dark'
      visible={visible}
    >
      <Button
        onClick={() => {
          setVisible(v => !v)
        }}
      >
        点我
      </Button>
    </Popover>
  )
}

const MultiLine: FC = () => {
  const [visible, setVisible] = useState(true)

  return (
    <Popover
      content={
        <div className={styles.multiLineContent}>
          <div className={styles.imageContainer}>{image}</div>
          <div>
            多行文字推荐关闭按钮
            <br />
            竖直方向上居中
          </div>
          <div
            className={styles.closeIcon}
            onClick={() => {
              setVisible(false)
            }}
          >
            <CloseOutline />
          </div>
        </div>
      }
      placement='bottom-start'
      mode='dark'
      visible={visible}
    >
      <Button
        onClick={() => {
          setVisible(v => !v)
        }}
      >
        点我
      </Button>
    </Popover>
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='带关闭按钮'>
        <DemoDescription>单行文字推荐关闭按钮居中</DemoDescription>
        <div style={{ paddingTop: 10, paddingBottom: 80 }}>
          <SingleLine />
        </div>
        <DemoDescription>多行文字推荐关闭按钮竖直方向上居中</DemoDescription>
        <div style={{ paddingTop: 10, paddingBottom: 80 }}>
          <MultiLine />
        </div>
      </DemoBlock>
    </>
  )
}







import React from 'react'
import { DemoBlock } from 'demos'
import { Button, Popover, Toast } from 'antd-mobile'
import { Action } from 'antd-mobile/es/components/popover'
import {
  AntOutline,
  HandPayCircleOutline,
  ScanningOutline,
  TransportQRcodeOutline,
} from 'antd-mobile-icons'

const actions: Action[] = [
  { key: 'scan', icon: <ScanningOutline />, text: '扫一扫' },
  { key: 'payment', icon: <HandPayCircleOutline />, text: '付钱/收钱' },
  { key: 'bus', icon: <TransportQRcodeOutline />, text: '乘车码' },
  { key: 'assistant', icon: <AntOutline />, text: '智能助理' },
]

export default () => {
  return (
    <>
      <DemoBlock title='浅色气泡菜单'>
        <Popover.Menu
          actions={actions}
          placement='bottom-start'
          onAction={node => Toast.show(`选择了 ${node.text}`)}
          trigger='click'
        >
          <Button>点我</Button>
        </Popover.Menu>
      </DemoBlock>

      <DemoBlock title='深色气泡菜单'>
        <Popover.Menu
          mode='dark'
          actions={actions}
          placement='right-start'
          onAction={node => Toast.show(`选择了 ${node.text}`)}
          trigger='click'
        >
          <Button>点我</Button>
        </Popover.Menu>
      </DemoBlock>

      <DemoBlock title='无图标气泡菜单'>
        <Popover.Menu
          actions={actions.map(action => ({
            ...action,
            icon: null,
          }))}
          onAction={node => Toast.show(`选择了 ${node.text}`)}
          placement='bottom-start'
          trigger='click'
        >
          <Button>点我</Button>
        </Popover.Menu>
      </DemoBlock>
    </>
  )
}









import React, { useState } from 'react'
import { Popup, Space, Button } from 'antd-mobile'
import { DemoBlock, lorem } from 'demos'

export default () => {
  const [visible1, setVisible1] = useState(false)
  const [visible2, setVisible2] = useState(false)
  const [visible3, setVisible3] = useState(false)
  const [visible4, setVisible4] = useState(false)
  const [visible5, setVisible5] = useState(false)
  const [visible6, setVisible6] = useState(false)
  const [visible7, setVisible7] = useState(false)
  const [visibleCloseRight, setVisibleCloseRight] = useState(false)

  return (
    <>
      <DemoBlock title='弹出位置'>
        <Space direction='vertical'>
          <>
            <Button
              onClick={() => {
                setVisible1(true)
              }}
            >
              底部弹出
            </Button>
            <Popup
              visible={visible1}
              onMaskClick={() => {
                setVisible1(false)
              }}
              bodyStyle={{ height: '40vh' }}
            >
              {mockContent}
            </Popup>
          </>
          <>
            <Button
              onClick={() => {
                setVisible2(true)
              }}
            >
              顶部弹出
            </Button>
            <Popup
              visible={visible2}
              onMaskClick={() => {
                setVisible2(false)
              }}
              position='top'
              bodyStyle={{ height: '40vh' }}
            >
              {mockContent}
            </Popup>
          </>
          <>
            <Button
              onClick={() => {
                setVisible3(true)
              }}
            >
              左侧弹出
            </Button>
            <Popup
              visible={visible3}
              onMaskClick={() => {
                setVisible3(false)
              }}
              position='left'
              bodyStyle={{ width: '60vw' }}
            >
              {mockContent}
            </Popup>
          </>
          <>
            <Button
              onClick={() => {
                setVisible4(true)
              }}
            >
              右侧弹出
            </Button>
            <Popup
              visible={visible4}
              onMaskClick={() => {
                setVisible4(false)
              }}
              position='right'
              bodyStyle={{ width: '60vw' }}
            >
              {mockContent}
            </Popup>
          </>
        </Space>
      </DemoBlock>

      <DemoBlock title='自定义样式'>
        <Space direction='vertical'>
          <>
            <Button
              onClick={() => {
                setVisible5(true)
              }}
            >
              圆角的弹出层
            </Button>
            <Popup
              visible={visible5}
              onMaskClick={() => {
                setVisible5(false)
              }}
              bodyStyle={{
                borderTopLeftRadius: '8px',
                borderTopRightRadius: '8px',
                minHeight: '40vh',
              }}
            >
              {mockContent}
            </Popup>
          </>
          <>
            <Button
              onClick={() => {
                setVisible7(true)
              }}
            >
              显示关闭按钮
            </Button>

            <Popup
              visible={visible7}
              showCloseButton
              onClose={() => {
                setVisible7(false)
              }}
            >
              {mockContentWithCloseIcon}
            </Popup>
          </>
          <>
            <Button
              onClick={() => {
                setVisibleCloseRight(true)
              }}
            >
              显示右侧弹出关闭按钮
            </Button>

            <Popup
              position='right'
              visible={visibleCloseRight}
              showCloseButton
              onClose={() => {
                setVisibleCloseRight(false)
              }}
            >
              {mockContentWithCloseIcon}
            </Popup>
          </>
          <>
            <Button
              onClick={() => {
                setVisible6(true)
              }}
            >
              内容超长滚动
            </Button>
            <Popup
              visible={visible6}
              onMaskClick={() => {
                setVisible6(false)
              }}
            >
              <div
                style={{ height: '40vh', overflowY: 'scroll', padding: '20px' }}
              >
                {mockLongContent}
              </div>
            </Popup>
          </>
        </Space>
      </DemoBlock>
    </>
  )
}

const mockLongContent = lorem.generateParagraphs(10)

const mockContent = (
  <div style={{ padding: 20 }}>{lorem.generateParagraphs(1)}</div>
)

const mockContentWithCloseIcon = (
  <div style={{ padding: '40px 20px 20px' }}>{lorem.generateParagraphs(1)}</div>
)









import React from 'react'
import { Result } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { SmileOutline } from 'antd-mobile-icons'

import './demo1.less'

export default () => {
  return (
    <>
      <DemoBlock title='成功状态' padding='0'>
        <Result
          status='success'
          title='操作成功'
          description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
        />
      </DemoBlock>

      <DemoBlock title='等待状态' padding='0'>
        <Result
          status='waiting'
          title='等待处理'
          description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
        />
      </DemoBlock>

      <DemoBlock title='提示状态' padding='0'>
        <Result
          status='info'
          title='信息提示'
          description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
        />
      </DemoBlock>

      <DemoBlock title='警告状态' padding='0'>
        <Result
          status='warning'
          title='警告提示'
          description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
        />
      </DemoBlock>

      <DemoBlock title='失败状态' padding='0'>
        <Result
          status='error'
          title='无法完成操作'
          description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
        />
      </DemoBlock>

      <DemoBlock title='自定义图标' padding='0'>
        <Result
          icon={<SmileOutline />}
          status='success'
          title='Well done'
          description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
        />
      </DemoBlock>
    </>
  )
}










import React from 'react'
import { Skeleton } from 'antd-mobile'
import { DemoBlock } from 'demos'
import styles from './demo1.less'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Skeleton.Title />
        <Skeleton.Paragraph />
      </DemoBlock>
      <DemoBlock title='有动画的骨架屏'>
        <Skeleton.Title animated />
        <Skeleton.Paragraph lineCount={5} animated />
      </DemoBlock>
      <DemoBlock title='自定义'>
        <Skeleton animated className={styles.customSkeleton} />
      </DemoBlock>
    </>
  )
}











import React, { FC, useRef } from 'react'
import { Dialog, List, SwipeAction, Toast, Image } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { Action, SwipeActionRef } from 'antd-mobile/es/components/swipe-action'

export default () => {
  return (
    <>
      <DemoBlock title='搭配列表使用' padding='0'>
        <WithList />
      </DemoBlock>

      <DemoBlock title='搭配图片使用' padding='0'>
        <CustomContent />
      </DemoBlock>

      <DemoBlock title='手动控制归位逻辑' padding='0'>
        <Manual />
      </DemoBlock>
    </>
  )
}

// 配合列表使用
const WithList: FC = () => {
  const leftActions: Action[] = [
    {
      key: 'pin',
      text: '置顶',
      color: 'primary',
    },
  ]
  const rightActions: Action[] = [
    {
      key: 'unsubscribe',
      text: '取消关注',
      color: 'light',
    },
    {
      key: 'mute',
      text: '免打扰',
      color: 'warning',
    },
    {
      key: 'delete',
      text: '删除',
      color: 'danger',
    },
  ]
  const items = ['A', 'B', 'C']
  return (
    <List>
      {items.map(item => (
        <SwipeAction
          key={item}
          leftActions={leftActions}
          rightActions={rightActions}
        >
          <List.Item>{item}</List.Item>
        </SwipeAction>
      ))}
    </List>
  )
}

const demoSrc =
  'https://images.unsplash.com/photo-1567945716310-4745a6b7844b?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=60'

// 自定义内容
const CustomContent: FC = () => {
  return (
    <SwipeAction
      rightActions={[
        {
          key: 'delete',
          text: '删除',
          color: 'danger',
        },
      ]}
    >
      <Image src={demoSrc} />
    </SwipeAction>
  )
}

// 手动控制归位逻辑
const Manual: FC = () => {
  const ref = useRef<SwipeActionRef>(null)
  return (
    <List>
      <SwipeAction
        ref={ref}
        closeOnAction={false}
        closeOnTouchOutside={false}
        rightActions={[
          {
            key: 'delete',
            text: '删除',
            color: 'danger',
            onClick: async () => {
              await Dialog.confirm({
                content: '确定要删除吗？',
              })
              ref.current?.close()
            },
          },
        ]}
      >
        <List.Item
          onClick={() => {
            Toast.show('你点击了列表项')
          }}
        >
          A
        </List.Item>
      </SwipeAction>
    </List>
  )
}











import React, { FC, useEffect, useRef, useState } from 'react'
import { Button, Space, Toast } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { UploadOutline } from 'antd-mobile-icons'
import type { ToastHandler } from 'antd-mobile/es/components/toast'

export default () => {
  const handler = useRef<ToastHandler>()

  return (
    <>
      <DemoBlock title='基础用法'>
        <Button
          onClick={() =>
            Toast.show({
              content: 'Hello World',
              afterClose: () => {
                console.log('after')
              },
            })
          }
        >
          轻提示
        </Button>
      </DemoBlock>

      <DemoBlock title='图标'>
        <Space wrap>
          <Button
            onClick={() =>
              Toast.show({
                icon: 'success',
                content: '保存成功',
              })
            }
          >
            成功
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                icon: 'fail',
                content: '名称已存在',
              })
            }}
          >
            失败
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                icon: 'loading',
                content: '加载中…',
              })
            }}
          >
            加载中
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                content: '上传中',
                icon: <UploadOutline />,
              })
            }}
          >
            自定义图标
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='更多功能'>
        <Space wrap>
          <Button
            block
            onClick={() => {
              Toast.show({
                content: 'Hello World',
                position: 'top',
              })
            }}
          >
            顶部提示
          </Button>
          <Button
            block
            onClick={() => {
              Toast.show({
                content: 'Hello World',
                position: 'bottom',
              })
            }}
          >
            底部提示
          </Button>
          <Button
            block
            onClick={() => {
              Toast.show({
                content: '请耐心等待, 不要退出',
                maskClickable: false,
              })
            }}
          >
            阻止背景点击
          </Button>
          <Button
            onClick={() => {
              Toast.show({
                icon: 'loading',
                content: <CountDownText />,
                duration: 5000,
              })
            }}
          >
            动态内容
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='手动清除'>
        <Space wrap>
          <Button
            block
            onClick={() => {
              handler.current = Toast.show({
                content: '这条提示不会自动消失',
                duration: 0,
                position: 'top',
              })
            }}
          >
            显示
          </Button>
          <Button
            block
            onClick={() => {
              Toast.clear()
            }}
          >
            清除
          </Button>
          <Button
            block
            onClick={() => {
              handler.current?.close()
            }}
          >
            关闭
          </Button>
        </Space>
      </DemoBlock>
    </>
  )
}

const CountDownText: FC = () => {
  const [count, setCount] = useState(5)
  useEffect(() => {
    const interval = window.setInterval(() => {
      setCount(x => {
        if (x > 1) {
          return x - 1
        } else {
          return x
        }
      })
    }, 1000)
    return () => {
      window.clearInterval(interval)
    }
  }, [])
  return <span>还剩 {count} 秒</span>
}









import React from 'react'
import { Badge, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'

import styles from './demo1.less'

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Space style={{ '--gap': '24px' }}>
          <Badge content='5'>
            <div className={styles.box} />
          </Badge>
          <Badge content='新'>
            <div className={styles.box} />
          </Badge>
          <Badge content={Badge.dot}>
            <div className={styles.box} />
          </Badge>
        </Space>
      </DemoBlock>

      <DemoBlock title='带边框'>
        <Badge content='更新啦' bordered>
          <div className={`${styles.box} ${styles.dark}`} />
        </Badge>
      </DemoBlock>

      <DemoBlock title='独立使用'>
        <Space>
          <Badge content='99+' />
          <Badge content='新消息!' />
        </Space>
      </DemoBlock>

      <DemoBlock title='自定义颜色和偏移量'>
        <Space style={{ '--gap': '24px' }}>
          <Badge
            color='#108ee9'
            content={Badge.dot}
            style={{ '--right': '100%', '--top': '100%' }}
          >
            <div className={styles.box} />
          </Badge>
          <Badge
            color='#87d068'
            content={Badge.dot}
            style={{ '--right': '100%' }}
          >
            <div className={styles.box} />
          </Badge>
          <Badge content={Badge.dot}>
            <div className={styles.box} />
          </Badge>
          <Badge color='orange' content={Badge.dot} style={{ '--top': '100%' }}>
            <div className={styles.box} />
          </Badge>
        </Space>
      </DemoBlock>
    </>
  )
}











import React from 'react'
import { NoticeBar, Space } from 'antd-mobile'
import { DemoBlock, lorem } from 'demos'
import { CompassOutline, CloseCircleOutline } from 'antd-mobile-icons'

const demoLongText = lorem.generateWords(20)

export default () => {
  return (
    <>
      <DemoBlock title='通告栏语义' padding='0' background='transparent'>
        <Space block direction='vertical'>
          <NoticeBar content='默认' color='default' />
          <NoticeBar content='警告' color='alert' />
          <NoticeBar content='错误' color='error' />
          <NoticeBar content='信息' color='info' />
        </Space>
      </DemoBlock>

      <DemoBlock title='可关闭' padding='0'>
        <NoticeBar content='这条通知可以关闭' color='alert' closeable />
      </DemoBlock>

      <DemoBlock title='超长滚动' padding='0'>
        <NoticeBar content={demoLongText} color='alert' />
      </DemoBlock>

      <DemoBlock title='多行展示' padding='0'>
        <NoticeBar
          content='适用于当前页面内信息的通知，是一种较醒目的页面内通知方式'
          wrap
          color='alert'
        />
      </DemoBlock>

      <DemoBlock title='自定义' padding='0' background='transparent'>
        <Space block direction='vertical'>
          <NoticeBar
            extra={<CloseCircleOutline style={{ fontSize: 18 }} />}
            icon={<CompassOutline />}
            content={'自定义图标'}
          />
          <NoticeBar
            extra={
              <Space style={{ '--gap': '12px' }}>
                <span>查看详情</span>
                <span>关闭</span>
              </Space>
            }
            content={'自定义右侧功能区'}
            color='alert'
          />
        </Space>
      </DemoBlock>
    </>
  )
}











import React from 'react'
import { Dropdown, Radio, Space } from 'antd-mobile'
import { DemoBlock } from 'demos'
import { ArrowDownCircleOutline, DownOutline } from 'antd-mobile-icons'

export default () => {
  return (
    <>
      <DemoBlock title='一列' padding={'0'}>
        <Dropdown>
          <Dropdown.Item key='sorter' title='排序'>
            <div style={{ padding: 12 }}>
              <Radio.Group defaultValue='default'>
                <Space direction='vertical' block>
                  <Radio block value='default'>
                    综合排序
                  </Radio>
                  <Radio block value='nearest'>
                    距离最近
                  </Radio>
                  <Radio block value='top-rated'>
                    评分最高
                  </Radio>
                </Space>
              </Radio.Group>
            </div>
          </Dropdown.Item>
        </Dropdown>
      </DemoBlock>

      <DemoBlock title='两列' padding={'0'}>
        <Dropdown>
          <Dropdown.Item key='sorter' title='排序'>
            <div style={{ padding: 12 }}>
              排序内容
              <br />
              排序内容
              <br />
              排序内容
              <br />
              排序内容
              <br />
            </div>
          </Dropdown.Item>
          <Dropdown.Item key='bizop' title='商机筛选'>
            <div style={{ padding: 12 }}>
              商机筛选内容
              <br />
              商机筛选内容
              <br />
              商机筛选内容
              <br />
            </div>
          </Dropdown.Item>
        </Dropdown>
      </DemoBlock>

      <DemoBlock title='三列' padding={'0'}>
        <Dropdown>
          <Dropdown.Item key='sorter' title='排序'>
            <div style={{ padding: 12 }}>
              排序内容
              <br />
              排序内容
              <br />
              排序内容
              <br />
              排序内容
              <br />
            </div>
          </Dropdown.Item>
          <Dropdown.Item key='bizop' title='商机筛选'>
            <div style={{ padding: 12 }}>
              商机筛选内容
              <br />
              商机筛选内容
              <br />
              商机筛选内容
              <br />
            </div>
          </Dropdown.Item>
          <Dropdown.Item key='more' title='更多筛选'>
            <div style={{ padding: 12 }}>
              更多筛选内容
              <br />
              更多筛选内容
              <br />
            </div>
          </Dropdown.Item>
        </Dropdown>
      </DemoBlock>
      <DemoBlock title='自定义arrow' padding={'0'}>
        <Dropdown arrow={<DownOutline />}>
          <Dropdown.Item key='sorter' title='排序'>
            <div style={{ padding: 12 }}>
              排序内容
              <br />
              排序内容
              <br />
              排序内容
              <br />
              排序内容
              <br />
            </div>
          </Dropdown.Item>
          <Dropdown.Item
            key='bizop'
            title='商机筛选'
            arrow={<ArrowDownCircleOutline />}
          >
            <div style={{ padding: 12 }}>
              商机筛选内容
              <br />
              商机筛选内容
              <br />
              商机筛选内容
              <br />
            </div>
          </Dropdown.Item>
          <Dropdown.Item key='more' title='更多筛选'>
            <div style={{ padding: 12 }}>
              更多筛选内容
              <br />
              更多筛选内容
              <br />
            </div>
          </Dropdown.Item>
        </Dropdown>
      </DemoBlock>
    </>
  )
}








import React from 'react'
import { FloatingBubble, Toast } from 'antd-mobile'
import { DemoDescription } from 'demos'
import { MessageFill } from 'antd-mobile-icons'

export default () => {
  const onClick = () => {
    Toast.show('你点击了气泡')
  }
  return (
    <div
      style={{
        textAlign: 'center',
        padding: '50vh 32px 0',
      }}
    >
      <DemoDescription>尝试拖拽和点击一下气泡吧</DemoDescription>
      <FloatingBubble
        style={{
          '--initial-position-bottom': '24px',
          '--initial-position-right': '24px',
          '--edge-distance': '24px',
        }}
        onClick={onClick}
      >
        <MessageFill fontSize={32} />
      </FloatingBubble>
    </div>
  )
}










import React, { FC, useState } from 'react'
import { ImageUploader, Space, Toast, Dialog } from 'antd-mobile'
import { DemoBlock, DemoDescription } from 'demos'
import { ImageUploadItem } from 'antd-mobile/es/components/image-uploader'

import { demoSrc, mockUpload, mockUploadFail } from './utils'

// 基础用法
const Basic: FC = () => {
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
  ])

  return (
    <ImageUploader
      value={fileList}
      onChange={setFileList}
      upload={mockUpload}
    />
  )
}

// 上传状态
const UploadStatus: FC = () => {
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
  ])

  return (
    <ImageUploader
      value={fileList}
      onChange={setFileList}
      upload={mockUploadFail as any}
    />
  )
}

// 限制上传大小
const LimitSize: FC = () => {
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
  ])

  function beforeUpload(file: File) {
    if (file.size > 1024 * 1024) {
      Toast.show('请选择小于 1M 的图片')
      return null
    }
    return file
  }

  return (
    <ImageUploader
      value={fileList}
      onChange={setFileList}
      upload={mockUpload}
      beforeUpload={beforeUpload}
    />
  )
}

// 限制图片数量
const LimitCount: FC = () => {
  const maxCount = 3
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
  ])

  return (
    <ImageUploader
      value={fileList}
      onChange={setFileList}
      upload={mockUpload}
      multiple
      maxCount={3}
      showUpload={fileList.length < maxCount}
      onCountExceed={exceed => {
        Toast.show(`最多选择 ${maxCount} 张图片，你多选了 ${exceed} 张`)
      }}
    />
  )
}

// 删除图片确认
const DeleteImage: FC = () => {
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
  ])

  return (
    <ImageUploader
      value={fileList}
      onChange={setFileList}
      upload={mockUpload}
      onDelete={() => {
        return Dialog.confirm({
          content: '是否确认删除',
        })
      }}
    />
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='基础用法'>
        <Basic />
      </DemoBlock>

      <DemoBlock title='上传状态'>
        <Space direction='vertical'>
          <UploadStatus />
          <DemoDescription content='尝试上传几张图片，可以看到上传中和失败的效果' />
        </Space>
      </DemoBlock>

      <DemoBlock title='限制上传大小'>
        <Space direction='vertical'>
          <LimitSize />
          <DemoDescription content='当用户选择的文件超过 1M 时，跳过上传并提示用户' />
        </Space>
      </DemoBlock>

      <DemoBlock title='限制图片数量'>
        <Space direction='vertical'>
          <LimitCount />
          <DemoDescription content='限制用户最多上传 3 张图片，当达到最大数量时隐藏掉上传按钮' />
        </Space>
      </DemoBlock>

      <DemoBlock title='删除图片确认'>
        <Space direction='vertical'>
          <DeleteImage />
          <DemoDescription content='当用户删除图片时，进行确认，确认后可删除图片' />
        </Space>
      </DemoBlock>
    </>
  )
}







import { sleep } from 'demos'

export const demoSrc =
  'https://images.unsplash.com/photo-1567945716310-4745a6b7844b?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=60'

export async function mockUpload(file: File) {
  await sleep(3000)
  return {
    url: URL.createObjectURL(file),
  }
}

export async function mockUploadFail() {
  await sleep(3000)
  throw new Error('Fail to upload')
}











import React, { FC, useState } from 'react'
import { DemoBlock } from 'demos'
import { ImageUploadItem } from 'antd-mobile/es/components/image-uploader'
import { ImageUploader } from 'antd-mobile'
import { PictureOutline } from 'antd-mobile-icons'

import { demoSrc, mockUpload } from './utils'

// 自定义大小
const CustomeSize: FC = () => {
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
  ])

  return (
    <ImageUploader
      style={{ '--cell-size': '90px' }}
      value={fileList}
      onChange={setFileList}
      upload={mockUpload}
    />
  )
}

// 自定义列数
// columns 属性存在时，不支持自定义 --cell-size 属性，详见 FAQ。
const CustomeColumns: FC = () => {
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
    {
      url: demoSrc,
    },
  ])

  return (
    <ImageUploader
      columns={5}
      value={fileList}
      onChange={setFileList}
      upload={mockUpload}
    />
  )
}

// 自定义上传按钮
const CustomUploadButton: FC = () => {
  const [fileList, setFileList] = useState<ImageUploadItem[]>([
    {
      url: demoSrc,
    },
  ])

  return (
    <ImageUploader value={fileList} onChange={setFileList} upload={mockUpload}>
      <div
        style={{
          width: 80,
          height: 80,
          borderRadius: 40,
          backgroundColor: '#f5f5f5',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          color: '#999999',
        }}
      >
        <PictureOutline style={{ fontSize: 32 }} />
      </div>
    </ImageUploader>
  )
}

export default () => {
  return (
    <>
      <DemoBlock title='自定义大小'>
        <CustomeSize />
      </DemoBlock>

      <DemoBlock title='自定义列数'>
        <CustomeColumns />
      </DemoBlock>

      <DemoBlock title='自定义上传按钮'>
        <CustomUploadButton />
      </DemoBlock>
    </>
  )
}








import React, { useState } from 'react'
import { List, Input, Dialog, NumberKeyboard, Toast, Button } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  const [visible, setVisible] = useState<any>('')
  const [value, setValue] = useState('')

  const openKeyboard = (name: string) => {
    setVisible(name)
  }

  const actions = {
    onClose: () => {
      Toast.show('closed')
      setVisible('')
    },
    onInput: (key: string) => {
      Toast.show(key)
    },
    onDelete: () => {
      Toast.show('delete')
    },
  }

  const onInput = (value: string) => {
    setValue(v => v + value)
  }

  const onDelete = () => {
    setValue(v => v.slice(0, v.length - 1))
  }

  return (
    <>
      <DemoBlock title='基础用法' padding='0'>
        <List>
          <List.Item onClick={() => openKeyboard('demo1')}>默认键盘</List.Item>
          <List.Item onClick={() => openKeyboard('demo2')}>
            带标题键盘
          </List.Item>
          <List.Item onClick={() => openKeyboard('demo3')}>
            带确认键盘
          </List.Item>
          <List.Item onClick={() => openKeyboard('demo4')}>乱序键盘</List.Item>
          <List.Item
            onClick={e => {
              Dialog.alert({
                content: (
                  <Button
                    color='primary'
                    fill='outline'
                    onClick={() => openKeyboard('demo5')}
                  >
                    打开键盘
                  </Button>
                ),
              })
              setVisible('')
              e.stopPropagation()
            }}
          >
            弹窗内展示键盘
          </List.Item>
          <List.Item onClick={() => openKeyboard('demo6')} arrow={false}>
            {/* 添加 readOnly 阻止原生键盘弹出 */}
            <Input placeholder='请输入内容' value={value} readOnly />
          </List.Item>
        </List>
      </DemoBlock>
      <NumberKeyboard
        visible={visible === 'demo1'}
        onClose={actions.onClose}
        onInput={actions.onInput}
        onDelete={actions.onDelete}
      />
      <NumberKeyboard
        visible={visible === 'demo2'}
        onClose={actions.onClose}
        onInput={actions.onInput}
        onDelete={actions.onDelete}
        title='数字键盘'
        customKey='-'
      />
      <NumberKeyboard
        visible={visible === 'demo3'}
        onClose={actions.onClose}
        onInput={actions.onInput}
        onDelete={actions.onDelete}
        showCloseButton={false}
        confirmText='确定'
      />
      <NumberKeyboard
        visible={visible === 'demo4'}
        onClose={actions.onClose}
        onInput={actions.onInput}
        onDelete={actions.onDelete}
        randomOrder
        customKey='X'
        confirmText='确定'
      />
      <NumberKeyboard
        visible={visible === 'demo5'}
        onClose={actions.onClose}
        onInput={actions.onInput}
        onDelete={actions.onDelete}
      />
      <NumberKeyboard
        visible={visible === 'demo6'}
        onClose={actions.onClose}
        onInput={onInput}
        onDelete={onDelete}
        customKey='X'
      />
    </>
  )
}







import React, { useState } from 'react'
import { List, NumberKeyboard } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  const [visible, setVisible] = useState<string>('')

  const openKeyboard = (name: string) => {
    setVisible(name)
  }

  const onClose = () => {
    setVisible('')
  }

  return (
    <>
      <DemoBlock title='自定义按钮' padding='0'>
        <List>
          <List.Item onClick={() => openKeyboard('demo1')}>
            自定义键盘
          </List.Item>
          <List.Item onClick={() => openKeyboard('demo2')}>
            多个自定义键盘
          </List.Item>
          <List.Item onClick={() => openKeyboard('demo3')}>
            带确认键盘
          </List.Item>
          <List.Item onClick={() => openKeyboard('demo4')}>
            多个自定义带确认键盘
          </List.Item>
        </List>
      </DemoBlock>
      <NumberKeyboard
        visible={visible === 'demo1'}
        onClose={onClose}
        customKey={'-'}
      />
      <NumberKeyboard
        visible={visible === 'demo2'}
        onClose={onClose}
        customKey={['-', '.']}
      />
      <NumberKeyboard
        visible={visible === 'demo3'}
        onClose={onClose}
        customKey={'-'}
        confirmText='确定'
      />
      <NumberKeyboard
        visible={visible === 'demo4'}
        onClose={onClose}
        customKey={['-', '.']}
        confirmText='确定'
      />
    </>
  )
}







import React, { useState } from 'react'
import { NumberKeyboard, PasscodeInput, Space } from 'antd-mobile'
import { DemoBlock, DemoDescription } from 'demos'

export default () => {
  const [error, setError] = useState(false)

  const onChange = (value: string) => {
    setError(value.length >= 6)
  }

  return (
    <>
      <DemoBlock title='基础用法'>
        <PasscodeInput keyboard={<NumberKeyboard />} />
      </DemoBlock>
      <DemoBlock title='显示明文'>
        <PasscodeInput length={4} plain keyboard={<NumberKeyboard />} />
      </DemoBlock>
      <DemoBlock title='错误状态'>
        <Space direction='vertical' block>
          <PasscodeInput
            onChange={onChange}
            keyboard={<NumberKeyboard />}
            error={error}
          />
          <DemoDescription>
            尝试输入一些内容吧，当你输入完成时会提示错误
          </DemoDescription>
        </Space>
      </DemoBlock>
      <DemoBlock title='格子间距'>
        <PasscodeInput seperated keyboard={<NumberKeyboard />} />
      </DemoBlock>
      <DemoBlock title='使用系统原生键盘'>
        <PasscodeInput plain />
      </DemoBlock>
    </>
  )
}










//RESUTPAGE COM 


import React from 'react'
import { ResultPage } from 'antd-mobile'
import { AlipayCircleFill } from 'antd-mobile-icons'

export default () => {
  const details = [
    {
      label: '肯德基（嘉里中心店）',
      value: '¥ 36.50',
      bold: true,
    },
    {
      label: '付款方式',
      value: '账户余额',
    },
  ]

  const Card = ResultPage.Card

  return (
    <ResultPage
      status='waiting'
      title={<div style={{ fontSize: 15 }}>支付成功</div>}
      description={
        <>
          <span style={{ fontSize: 32, color: '#ffffff', marginRight: 4 }}>
            ¥
          </span>
          <span style={{ fontSize: 48, color: '#ffffff' }}>36.50</span>
        </>
      }
      icon={<AlipayCircleFill />}
      details={details}
      secondaryButtonText='辅助操作'
      primaryButtonText='主要操作'
    >
      <Card style={{ height: 64 }}> </Card>
      <Card style={{ height: 128, marginTop: 12 }}> </Card>
      <Card style={{ height: 128, marginTop: 12 }}> </Card>
      <Card style={{ height: 128, marginTop: 12 }}> </Card>
      <Card style={{ height: 128, marginTop: 12 }}> </Card>
      <Card style={{ height: 128, marginTop: 12 }}> </Card>
    </ResultPage>
  )
}




import React from 'react'
import { ResultPage, Toast } from 'antd-mobile'

export default () => {
  return (
    <ResultPage
      status='success'
      title='操作成功'
      description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
      secondaryButtonText='辅助操作'
      onSecondaryButtonClick={() => Toast.show('点击了辅助按钮')}
      primaryButtonText='主要操作'
      onPrimaryButtonClick={() => Toast.show('点击了主要按钮')}
    />
  )
}


import React from 'react'
import { ResultPage, Card } from 'antd-mobile'

export default () => {
  return (
    <ResultPage
      status='success'
      title='操作成功'
      description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
    >
      <ResultPage.Card style={{ height: 64, padding: 8 }}>
        搭配 ResultPage.Card 使用
      </ResultPage.Card>

      <Card style={{ height: 128, marginTop: 12 }}>搭配 Card 使用</Card>
    </ResultPage>
  )
}






import React from 'react'
import { ResultPage } from 'antd-mobile'

export default () => {
  const details = [
    {
      label: '收款方',
      value: '张三',
      bold: true,
    },
    {
      label: '付款方式',
      value: '账户余额',
    },
    {
      label: '转账金额',
      value: '¥100.00',
    },
    {
      label: '转账金额',
      value: '¥100.00',
    },
    {
      label: '转账金额',
      value: '¥100.00',
    },
  ]

  return (
    <ResultPage
      status='success'
      title='操作成功'
      description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
      details={details}
    />
  )
}




import React from 'react'
import { ResultPage } from 'antd-mobile'

export default () => {
  return (
    <ResultPage
      status='success'
      title='操作成功'
      description='内容详情可折行，建议不超过两行建议不超过两行建议不超过两行'
    />
  )
}








import React from 'react'
import { TreeSelect } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  const options2 = [
    {
      label: '分类A很长很长很长很长的标题',
      value: 'A',
      children: [
        {
          label: '分类A-1',
          value: 'A1',
        },
        {
          label: '分类A-2',
          value: 'A2',
        },
      ],
    },
    {
      label: '分类B',
      value: 'B',
      children: [
        {
          label: '分类B-1',
          value: 'B1',
        },
        {
          label: '分类B-2',
          value: 'B2',
        },
      ],
    },
  ]

  const options3 = [
    {
      label: '分类A',
      value: 'A',
      children: [
        {
          label: '分类A-1',
          value: 'A1',
          children: [
            {
              label: '分类A-1-1',
              value: 'A11',
            },
            {
              label: '分类A-1-2',
              value: 'A12',
            },
          ],
        },
        {
          label: '分类A-2',
          value: 'A2',
          children: [
            {
              label: '分类A-2-1',
              value: 'A21',
            },
            {
              label: '分类A-2-2',
              value: 'A22',
            },
          ],
        },
      ],
    },
    {
      label: '分类B',
      value: 'B',
      children: [
        {
          label: '分类B-1',
          value: 'B1',
          children: [
            {
              label: '分类B-1-1',
              value: 'B11',
            },
            {
              label: '分类B-1-2',
              value: 'B12',
            },
          ],
        },
        {
          label: '分类B-2',
          value: 'B2',
          children: [
            {
              label: '分类B-2-1',
              value: 'B21',
            },
            {
              label: '分类B-2-2',
              value: 'B22',
            },
          ],
        },
      ],
    },
    {
      label: '分类C',
      value: 'C',
      children: [
        {
          label: '分类C-1',
          value: 'C1',
          children: [
            {
              label: '分类C-1-1',
              value: 'C11',
            },
            {
              label: '分类C-1-2',
              value: 'C12',
            },
          ],
        },
        {
          label: '分类C-2',
          value: 'C2',
          children: [
            {
              label: '分类C-2-1',
              value: 'C21',
            },
            {
              label: '分类C-2-2',
              value: 'C22',
            },
          ],
        },
      ],
    },
    {
      label: '分类D',
      value: 'D',
      children: [
        {
          label: '分类D-1',
          value: 'D1',
          children: [
            {
              label: '分类D-1-1',
              value: 'D11',
            },
            {
              label: '分类D-1-2',
              value: 'D12',
            },
          ],
        },
        {
          label: '分类D-2',
          value: 'D2',
          children: [
            {
              label: '分类D-2-1',
              value: 'D21',
            },
            {
              label: '分类D-2-2',
              value: 'D22',
            },
          ],
        },
      ],
    },
  ]

  return (
    <div>
      <DemoBlock title='单选' padding='0'>
        <div style={{ height: '180px' }}>
          <TreeSelect
            defaultValue={['A', 'A1', 'A12']}
            options={options3}
            onChange={(value, nodes) => {
              console.log(value, nodes)
            }}
          />
        </div>
      </DemoBlock>
      <DemoBlock title='两列单选' padding='0'>
        <div style={{ height: '180px' }}>
          <TreeSelect
            defaultValue={['A', 'A1']}
            options={options2}
            onChange={(value, nodes) => {
              console.log(value, nodes)
            }}
          />
        </div>
      </DemoBlock>
    </div>
  )
}







import React from 'react'
import { NumberKeyboard, VirtualInput } from 'antd-mobile'
import { DemoBlock } from 'demos'

export default () => {
  return (
    <>
      <DemoBlock title='配合 NumberKeyboard 使用'>
        <VirtualInput placeholder='请输入内容' keyboard={<NumberKeyboard />} />
      </DemoBlock>

      <DemoBlock title='带清除按钮'>
        <VirtualInput
          placeholder='请输入内容'
          clearable
          keyboard={<NumberKeyboard />}
        />
      </DemoBlock>

      <DemoBlock title='禁用状态'>
        <VirtualInput
          value='这是一个被禁用的输入框'
          disabled
          keyboard={<NumberKeyboard />}
        />
      </DemoBlock>

      <DemoBlock title='右侧对齐'>
        <VirtualInput
          placeholder='请输入内容'
          keyboard={<NumberKeyboard />}
          style={{ '--text-align': 'right' }}
        />
      </DemoBlock>

      <DemoBlock title='自定义光标样式'>
        <VirtualInput
          placeholder='请输入内容'
          keyboard={<NumberKeyboard />}
          style={{ '--caret-width': '1px', '--caret-color': '#666666' }}
        />
      </DemoBlock>
    </>
  )
}









import React from 'react'
import { Button, Space } from 'antd-mobile'
import { DemoBlock, sleep } from 'demos'
import { SearchOutline } from 'antd-mobile-icons'

export default () => {
  return (
    <>
      <DemoBlock title='自定义图标'>
        <Button>
          <Space>
            <SearchOutline />
            <span>搜索</span>
          </Space>
        </Button>
      </DemoBlock>

      <DemoBlock title='形状'>
        <Space wrap>
          <Button shape='default' color='primary'>
            Default Button
          </Button>
          <Button block shape='rounded' color='primary'>
            Rounded Button
          </Button>
          <Button block shape='rectangular' color='primary'>
            Rectangular Button
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='加载状态'>
        <Space wrap>
          <Button loading color='primary' loadingText='正在加载'>
            Loading
          </Button>
          <Button loading>Loading</Button>
          <Button
            loading='auto'
            onClick={async () => {
              await sleep(1000)
            }}
          >
            Auto Loading
          </Button>
        </Space>
      </DemoBlock>

      <DemoBlock title='禁用状态'>
        <Space wrap>
          <Button disabled>Disabled</Button>
          <Button disabled color='primary'>
            Disabled
          </Button>
        </Space>
      </DemoBlock>
    </>
  )
}










//ANT PC   




import React, { useState } from 'react';
import {
  AppstoreOutlined,
  ContainerOutlined,
  DesktopOutlined,
  MailOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  PieChartOutlined,
} from '@ant-design/icons';
import { Button, Menu } from 'antd';
function getItem(label, key, icon, children, type) {
  return {
    key,
    icon,
    children,
    label,
    type,
  };
}
const items = [
  getItem('Option 1', '1', <PieChartOutlined />),
  getItem('Option 2', '2', <DesktopOutlined />),
  getItem('Option 3', '3', <ContainerOutlined />),
  getItem('Navigation One', 'sub1', <MailOutlined />, [
    getItem('Option 5', '5'),
    getItem('Option 6', '6'),
    getItem('Option 7', '7'),
    getItem('Option 8', '8'),
  ]),
  getItem('Navigation Two', 'sub2', <AppstoreOutlined />, [
    getItem('Option 9', '9'),
    getItem('Option 10', '10'),
    getItem('Submenu', 'sub3', null, [getItem('Option 11', '11'), getItem('Option 12', '12')]),
  ]),
];
const App = () => {
  const [collapsed, setCollapsed] = useState(false);
  const toggleCollapsed = () => {
    setCollapsed(!collapsed);
  };
  return (
    <div
      style={{
        width: 256,
      }}
    >
      <Button
        type="primary"
        onClick={toggleCollapsed}
        style={{
          marginBottom: 16,
        }}
      >
        {collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
      </Button>
      <Menu
        defaultSelectedKeys={['1']}
        defaultOpenKeys={['sub1']}
        mode="inline"
        theme="dark"
        inlineCollapsed={collapsed}
        items={items}
      />
    </div>
  );
};
export default App;








import React, { useState } from 'react';
import { Button, message, Steps } from 'antd';

const steps = [
  {
    title: 'First',
    content: 'First-content',
  },
  {
    title: 'Second',
    content: 'Second-content',
  },
  {
    title: 'Last',
    content: 'Last-content',
  },
];

const App: React.FC = () => {
  const [current, setCurrent] = useState(0);

  const next = () => {
    setCurrent(current + 1);
  };

  const prev = () => {
    setCurrent(current - 1);
  };
  const items = steps.map((item) => ({ key: item.title, title: item.title }));

  return (
    <>
      <Steps current={current} items={items} />
      <div className="steps-content">{steps[current].content}</div>
      <div className="steps-action">
        {current < steps.length - 1 && (
          <Button type="primary" onClick={() => next()}>
            Next
          </Button>
        )}
        {current === steps.length - 1 && (
          <Button type="primary" onClick={() => message.success('Processing complete!')}>
            Done
          </Button>
        )}
        {current > 0 && (
          <Button style={{ margin: '0 8px' }} onClick={() => prev()}>
            Previous
          </Button>
        )}
      </div>
    </>
  );
};

export default App;













import React from 'react';
import { Steps } from 'antd';

const description = 'This is a description';
const App: React.FC = () => (
  <Steps
    current={1}
    status="error"
    items={[
      {
        title: 'Finished',
        description,
      },
      {
        title: 'In Process',
        description,
      },
      {
        title: 'Waiting',
        description,
      },
    ]}
  />
);

export default App;







import React from 'react';
import { LoadingOutlined, SmileOutlined, SolutionOutlined, UserOutlined } from '@ant-design/icons';
import { Steps } from 'antd';

const App: React.FC = () => (
  <Steps
    items={[
      {
        title: 'Login',
        status: 'finish',
        icon: <UserOutlined />,
      },
      {
        title: 'Verification',
        status: 'finish',
        icon: <SolutionOutlined />,
      },
      {
        title: 'Pay',
        status: 'process',
        icon: <LoadingOutlined />,
      },
      {
        title: 'Done',
        status: 'wait',
        icon: <SmileOutlined />,
      },
    ]}
  />
);

export default App;







import React from 'react';
import { UserOutlined } from '@ant-design/icons';
import { AutoComplete, Input } from 'antd';

const renderTitle = (title: string) => (
  <span>
    {title}
    <a
      style={{ float: 'right' }}
      href="https://www.google.com/search?q=antd"
      target="_blank"
      rel="noopener noreferrer"
    >
      more
    </a>
  </span>
);

const renderItem = (title: string, count: number) => ({
  value: title,
  label: (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
      }}
    >
      {title}
      <span>
        <UserOutlined /> {count}
      </span>
    </div>
  ),
});

const options = [
  {
    label: renderTitle('Libraries'),
    options: [renderItem('AntDesign', 10000), renderItem('AntDesign UI', 10600)],
  },
  {
    label: renderTitle('Solutions'),
    options: [renderItem('AntDesign UI FAQ', 60100), renderItem('AntDesign FAQ', 30010)],
  },
  {
    label: renderTitle('Articles'),
    options: [renderItem('AntDesign design language', 100000)],
  },
];

const App: React.FC = () => (
  <AutoComplete
    popupClassName="certain-category-search-dropdown"
    dropdownMatchSelectWidth={500}
    style={{ width: 250 }}
    options={options}
  >
    <Input.Search size="large" placeholder="input here" />
  </AutoComplete>
);

export default App;






import React from 'react';
import type { DatePickerProps } from 'antd';
import { DatePicker, Space } from 'antd';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';

dayjs.extend(customParseFormat);

const { RangePicker } = DatePicker;

const dateFormat = 'YYYY/MM/DD';
const weekFormat = 'MM/DD';
const monthFormat = 'YYYY/MM';

const dateFormatList = ['DD/MM/YYYY', 'DD/MM/YY'];

const customFormat: DatePickerProps['format'] = (value) =>
  `custom format: ${value.format(dateFormat)}`;

const customWeekStartEndFormat: DatePickerProps['format'] = (value) =>
  `${dayjs(value).startOf('week').format(weekFormat)} ~ ${dayjs(value)
    .endOf('week')
    .format(weekFormat)}`;

const App: React.FC = () => (
  <Space direction="vertical" size={12}>
    <DatePicker defaultValue={dayjs('2015/01/01', dateFormat)} format={dateFormat} />
    <DatePicker defaultValue={dayjs('01/01/2015', dateFormatList[0])} format={dateFormatList} />
    <DatePicker defaultValue={dayjs('2015/01', monthFormat)} format={monthFormat} picker="month" />
    <DatePicker defaultValue={dayjs()} format={customWeekStartEndFormat} picker="week" />
    <RangePicker
      defaultValue={[dayjs('2015/01/01', dateFormat), dayjs('2015/01/01', dateFormat)]}
      format={dateFormat}
    />
    <DatePicker defaultValue={dayjs('2015/01/01', dateFormat)} format={customFormat} />
  </Space>
);

export default App;








import React from 'react';
import { DatePicker, Space } from 'antd';

const { RangePicker } = DatePicker;

const App: React.FC = () => (
  <Space direction="vertical" size={12}>
    <RangePicker />
    <RangePicker showTime />
    <RangePicker picker="week" />
    <RangePicker picker="month" />
    <RangePicker picker="quarter" />
    <RangePicker picker="year" />
  </Space>
);

export default App;








import React, { useState } from 'react';
import {
  AutoComplete,
  Button,
  Cascader,
  Checkbox,
  Col,
  Form,
  Input,
  InputNumber,
  Row,
  Select,
} from 'antd';

const { Option } = Select;

const residences = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];

const formItemLayout = {
  labelCol: {
    xs: { span: 24 },
    sm: { span: 8 },
  },
  wrapperCol: {
    xs: { span: 24 },
    sm: { span: 16 },
  },
};
const tailFormItemLayout = {
  wrapperCol: {
    xs: {
      span: 24,
      offset: 0,
    },
    sm: {
      span: 16,
      offset: 8,
    },
  },
};

const App: React.FC = () => {
  const [form] = Form.useForm();

  const onFinish = (values: any) => {
    console.log('Received values of form: ', values);
  };

  const prefixSelector = (
    <Form.Item name="prefix" noStyle>
      <Select style={{ width: 70 }}>
        <Option value="86">+86</Option>
        <Option value="87">+87</Option>
      </Select>
    </Form.Item>
  );

  const suffixSelector = (
    <Form.Item name="suffix" noStyle>
      <Select style={{ width: 70 }}>
        <Option value="USD">$</Option>
        <Option value="CNY">¥</Option>
      </Select>
    </Form.Item>
  );

  const [autoCompleteResult, setAutoCompleteResult] = useState<string[]>([]);

  const onWebsiteChange = (value: string) => {
    if (!value) {
      setAutoCompleteResult([]);
    } else {
      setAutoCompleteResult(['.com', '.org', '.net'].map((domain) => `${value}${domain}`));
    }
  };

  const websiteOptions = autoCompleteResult.map((website) => ({
    label: website,
    value: website,
  }));

  return (
    <Form
      {...formItemLayout}
      form={form}
      name="register"
      onFinish={onFinish}
      initialValues={{
        residence: ['zhejiang', 'hangzhou', 'xihu'],
        prefix: '86',
      }}
      scrollToFirstError
    >
      <Form.Item
        name="email"
        label="E-mail"
        rules={[
          {
            type: 'email',
            message: 'The input is not valid E-mail!',
          },
          {
            required: true,
            message: 'Please input your E-mail!',
          },
        ]}
      >
        <Input />
      </Form.Item>

      <Form.Item
        name="password"
        label="Password"
        rules={[
          {
            required: true,
            message: 'Please input your password!',
          },
        ]}
        hasFeedback
      >
        <Input.Password />
      </Form.Item>

      <Form.Item
        name="confirm"
        label="Confirm Password"
        dependencies={['password']}
        hasFeedback
        rules={[
          {
            required: true,
            message: 'Please confirm your password!',
          },
          ({ getFieldValue }) => ({
            validator(_, value) {
              if (!value || getFieldValue('password') === value) {
                return Promise.resolve();
              }
              return Promise.reject(new Error('The two passwords that you entered do not match!'));
            },
          }),
        ]}
      >
        <Input.Password />
      </Form.Item>

      <Form.Item
        name="nickname"
        label="Nickname"
        tooltip="What do you want others to call you?"
        rules={[{ required: true, message: 'Please input your nickname!', whitespace: true }]}
      >
        <Input />
      </Form.Item>

      <Form.Item
        name="residence"
        label="Habitual Residence"
        rules={[
          { type: 'array', required: true, message: 'Please select your habitual residence!' },
        ]}
      >
        <Cascader options={residences} />
      </Form.Item>

      <Form.Item
        name="phone"
        label="Phone Number"
        rules={[{ required: true, message: 'Please input your phone number!' }]}
      >
        <Input addonBefore={prefixSelector} style={{ width: '100%' }} />
      </Form.Item>

      <Form.Item
        name="donation"
        label="Donation"
        rules={[{ required: true, message: 'Please input donation amount!' }]}
      >
        <InputNumber addonAfter={suffixSelector} style={{ width: '100%' }} />
      </Form.Item>

      <Form.Item
        name="website"
        label="Website"
        rules={[{ required: true, message: 'Please input website!' }]}
      >
        <AutoComplete options={websiteOptions} onChange={onWebsiteChange} placeholder="website">
          <Input />
        </AutoComplete>
      </Form.Item>

      <Form.Item
        name="intro"
        label="Intro"
        rules={[{ required: true, message: 'Please input Intro' }]}
      >
        <Input.TextArea showCount maxLength={100} />
      </Form.Item>

      <Form.Item
        name="gender"
        label="Gender"
        rules={[{ required: true, message: 'Please select gender!' }]}
      >
        <Select placeholder="select your gender">
          <Option value="male">Male</Option>
          <Option value="female">Female</Option>
          <Option value="other">Other</Option>
        </Select>
      </Form.Item>

      <Form.Item label="Captcha" extra="We must make sure that your are a human.">
        <Row gutter={8}>
          <Col span={12}>
            <Form.Item
              name="captcha"
              noStyle
              rules={[{ required: true, message: 'Please input the captcha you got!' }]}
            >
              <Input />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Button>Get captcha</Button>
          </Col>
        </Row>
      </Form.Item>

      <Form.Item
        name="agreement"
        valuePropName="checked"
        rules={[
          {
            validator: (_, value) =>
              value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),
          },
        ]}
        {...tailFormItemLayout}
      >
        <Checkbox>
          I have read the <a href="">agreement</a>
        </Checkbox>
      </Form.Item>
      <Form.Item {...tailFormItemLayout}>
        <Button type="primary" htmlType="submit">
          Register
        </Button>
      </Form.Item>
    </Form>
  );
};

export default App;











import React from 'react';
import { SmileOutlined } from '@ant-design/icons';
import {
  Cascader,
  DatePicker,
  Form,
  Input,
  InputNumber,
  Mentions,
  Select,
  TimePicker,
  TreeSelect,
} from 'antd';

const { Option } = Select;

const formItemLayout = {
  labelCol: {
    xs: { span: 24 },
    sm: { span: 6 },
  },
  wrapperCol: {
    xs: { span: 24 },
    sm: { span: 14 },
  },
};

const App: React.FC = () => (
  <Form {...formItemLayout}>
    <Form.Item
      label="Fail"
      validateStatus="error"
      help="Should be combination of numbers & alphabets"
    >
      <Input placeholder="unavailable choice" id="error" />
    </Form.Item>

    <Form.Item label="Warning" validateStatus="warning">
      <Input placeholder="Warning" id="warning" prefix={<SmileOutlined />} />
    </Form.Item>

    <Form.Item
      label="Validating"
      hasFeedback
      validateStatus="validating"
      help="The information is being validated..."
    >
      <Input placeholder="I'm the content is being validated" id="validating" />
    </Form.Item>

    <Form.Item label="Success" hasFeedback validateStatus="success">
      <Input placeholder="I'm the content" id="success" />
    </Form.Item>

    <Form.Item label="Warning" hasFeedback validateStatus="warning">
      <Input placeholder="Warning" id="warning2" />
    </Form.Item>

    <Form.Item
      label="Fail"
      hasFeedback
      validateStatus="error"
      help="Should be combination of numbers & alphabets"
    >
      <Input placeholder="unavailable choice" id="error2" />
    </Form.Item>

    <Form.Item label="Success" hasFeedback validateStatus="success">
      <DatePicker style={{ width: '100%' }} />
    </Form.Item>

    <Form.Item label="Warning" hasFeedback validateStatus="warning">
      <TimePicker style={{ width: '100%' }} />
    </Form.Item>

    <Form.Item label="Error" hasFeedback validateStatus="error">
      <DatePicker.RangePicker style={{ width: '100%' }} />
    </Form.Item>

    <Form.Item label="Error" hasFeedback validateStatus="error">
      <Select placeholder="I'm Select" allowClear>
        <Option value="1">Option 1</Option>
        <Option value="2">Option 2</Option>
        <Option value="3">Option 3</Option>
      </Select>
    </Form.Item>

    <Form.Item
      label="Validating"
      hasFeedback
      validateStatus="error"
      help="Something breaks the rule."
    >
      <Cascader placeholder="I'm Cascader" options={[{ value: 'xx', label: 'xx' }]} allowClear />
    </Form.Item>

    <Form.Item label="Warning" hasFeedback validateStatus="warning" help="Need to be checked">
      <TreeSelect
        placeholder="I'm TreeSelect"
        treeData={[{ value: 'xx', label: 'xx' }]}
        allowClear
      />
    </Form.Item>

    <Form.Item label="inline" style={{ marginBottom: 0 }}>
      <Form.Item
        validateStatus="error"
        help="Please select right date"
        style={{ display: 'inline-block', width: 'calc(50% - 12px)' }}
      >
        <DatePicker />
      </Form.Item>
      <span
        style={{ display: 'inline-block', width: '24px', lineHeight: '32px', textAlign: 'center' }}
      >
        -
      </span>
      <Form.Item style={{ display: 'inline-block', width: 'calc(50% - 12px)' }}>
        <DatePicker />
      </Form.Item>
    </Form.Item>

    <Form.Item label="Success" hasFeedback validateStatus="success">
      <InputNumber style={{ width: '100%' }} />
    </Form.Item>

    <Form.Item label="Success" hasFeedback validateStatus="success">
      <Input allowClear placeholder="with allowClear" />
    </Form.Item>

    <Form.Item label="Warning" hasFeedback validateStatus="warning">
      <Input.Password placeholder="with input password" />
    </Form.Item>

    <Form.Item label="Error" hasFeedback validateStatus="error">
      <Input.Password allowClear placeholder="with input password and allowClear" />
    </Form.Item>

    <Form.Item label="Fail" validateStatus="error" hasFeedback>
      <Mentions />
    </Form.Item>

    <Form.Item label="Fail" validateStatus="error" hasFeedback help="Should have something">
      <Input.TextArea allowClear showCount />
    </Form.Item>
  </Form>
);

export default App;



import React, { useCallback, useRef, useState } from 'react';
import { Mentions } from 'antd';
import debounce from 'lodash/debounce';

const App: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [users, setUsers] = useState<{ login: string; avatar_url: string }[]>([]);
  const ref = useRef<string>();

  const loadGithubUsers = (key: string) => {
    if (!key) {
      setUsers([]);
      return;
    }

    fetch(`https://api.github.com/search/users?q=${key}`)
      .then((res) => res.json())
      .then(({ items = [] }) => {
        if (ref.current !== key) return;

        setLoading(false);
        setUsers(items.slice(0, 10));
      });
  };

  const debounceLoadGithubUsers = useCallback(debounce(loadGithubUsers, 800), []);

  const onSearch = (search: string) => {
    console.log('Search:', search);
    ref.current = search;
    setLoading(!!search);
    setUsers([]);

    debounceLoadGithubUsers(search);
  };

  return (
    <Mentions
      style={{ width: '100%' }}
      loading={loading}
      onSearch={onSearch}
      options={users.map(({ login, avatar_url: avatar }) => ({
        key: login,
        value: login,
        className: 'antd-demo-dynamic-option',
        label: (
          <>
            <img src={avatar} alt={login} />
            <span>{login}</span>
          </>
        ),
      }))}
    />
  );
};

export default App;


import React from 'react';
import { Mentions } from 'antd';
import type { MentionsOptionProps } from 'antd/es/mentions';

const onChange = (value: string) => {
  console.log('Change:', value);
};

const onSelect = (option: MentionsOptionProps) => {
  console.log('select', option);
};

const App: React.FC = () => (
  <Mentions
    style={{ width: '100%' }}
    onChange={onChange}
    onSelect={onSelect}
    defaultValue="@afc163"
    options={[
      {
        value: 'afc163',
        label: 'afc163',
      },
      {
        value: 'zombieJ',
        label: 'zombieJ',
      },
      {
        value: 'yesmeck',
        label: 'yesmeck',
      },
    ]}
  />
);

export default App;




import React, { useState } from 'react';
import { Radio, Select } from 'antd';
import type { SizeType } from 'antd/es/config-provider/SizeContext';
import type { SelectProps, RadioChangeEvent } from 'antd';

const options: SelectProps['options'] = [];
for (let i = 10; i < 36; i++) {
  options.push({
    value: i.toString(36) + i,
    label: i.toString(36) + i,
  });
}

const handleChange = (value: string | string[]) => {
  console.log(`Selected: ${value}`);
};

const App: React.FC = () => {
  const [size, setSize] = useState<SizeType>('middle');

  const handleSizeChange = (e: RadioChangeEvent) => {
    setSize(e.target.value);
  };

  return (
    <>
      <Radio.Group value={size} onChange={handleSizeChange}>
        <Radio.Button value="large">Large</Radio.Button>
        <Radio.Button value="default">Default</Radio.Button>
        <Radio.Button value="small">Small</Radio.Button>
      </Radio.Group>
      <br />
      <br />
      <Select
        size={size}
        defaultValue="a1"
        onChange={handleChange}
        style={{ width: 200 }}
        options={options}
      />
      <br />
      <Select
        mode="multiple"
        size={size}
        placeholder="Please select"
        defaultValue={['a10', 'c12']}
        onChange={handleChange}
        style={{ width: '100%' }}
        options={options}
      />
      <br />
      <Select
        mode="tags"
        size={size}
        placeholder="Please select"
        defaultValue={['a10', 'c12']}
        onChange={handleChange}
        style={{ width: '100%' }}
        options={options}
      />
    </>
  );
};

export default App;



import React, { useMemo, useRef, useState } from 'react';
import { Select, Spin } from 'antd';
import type { SelectProps } from 'antd/es/select';
import debounce from 'lodash/debounce';

export interface DebounceSelectProps<ValueType = any>
  extends Omit<SelectProps<ValueType | ValueType[]>, 'options' | 'children'> {
  fetchOptions: (search: string) => Promise<ValueType[]>;
  debounceTimeout?: number;
}

function DebounceSelect<
  ValueType extends { key?: string; label: React.ReactNode; value: string | number } = any,
>({ fetchOptions, debounceTimeout = 800, ...props }: DebounceSelectProps<ValueType>) {
  const [fetching, setFetching] = useState(false);
  const [options, setOptions] = useState<ValueType[]>([]);
  const fetchRef = useRef(0);

  const debounceFetcher = useMemo(() => {
    const loadOptions = (value: string) => {
      fetchRef.current += 1;
      const fetchId = fetchRef.current;
      setOptions([]);
      setFetching(true);

      fetchOptions(value).then((newOptions) => {
        if (fetchId !== fetchRef.current) {
          // for fetch callback order
          return;
        }

        setOptions(newOptions);
        setFetching(false);
      });
    };

    return debounce(loadOptions, debounceTimeout);
  }, [fetchOptions, debounceTimeout]);

  return (
    <Select
      labelInValue
      filterOption={false}
      onSearch={debounceFetcher}
      notFoundContent={fetching ? <Spin size="small" /> : null}
      {...props}
      options={options}
    />
  );
}

// Usage of DebounceSelect
interface UserValue {
  label: string;
  value: string;
}

async function fetchUserList(username: string): Promise<UserValue[]> {
  console.log('fetching user', username);

  return fetch('https://randomuser.me/api/?results=5')
    .then((response) => response.json())
    .then((body) =>
      body.results.map(
        (user: { name: { first: string; last: string }; login: { username: string } }) => ({
          label: `${user.name.first} ${user.name.last}`,
          value: user.login.username,
        }),
      ),
    );
}

const App: React.FC = () => {
  const [value, setValue] = useState<UserValue[]>([]);

  return (
    <DebounceSelect
      mode="multiple"
      value={value}
      placeholder="Select users"
      fetchOptions={fetchUserList}
      onChange={(newValue) => {
        setValue(newValue as UserValue[]);
      }}
      style={{ width: '100%' }}
    />
  );
};

export default App;



import React from 'react';
import { UploadOutlined } from '@ant-design/icons';
import { Button, Upload } from 'antd';
import type { UploadFile } from 'antd/es/upload/interface';

const fileList: UploadFile[] = [
  {
    uid: '0',
    name: 'xxx.png',
    status: 'uploading',
    percent: 33,
  },
  {
    uid: '-1',
    name: 'yyy.png',
    status: 'done',
    url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
    thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
  },
  {
    uid: '-2',
    name: 'zzz.png',
    status: 'error',
  },
];

const App: React.FC = () => (
  <>
    <Upload
      action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
      listType="picture"
      defaultFileList={[...fileList]}
    >
      <Button icon={<UploadOutlined />}>Upload</Button>
    </Upload>
    <br />
    <br />
    <Upload
      action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
      listType="picture"
      defaultFileList={[...fileList]}
      className="upload-list-inline"
    >
      <Button icon={<UploadOutlined />}>Upload</Button>
    </Upload>
  </>
);

export default App;





import React, { useState } from 'react';
import { UploadOutlined } from '@ant-design/icons';
import { Button, message, Upload } from 'antd';
import type { RcFile, UploadFile, UploadProps } from 'antd/es/upload/interface';

const App: React.FC = () => {
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const [uploading, setUploading] = useState(false);

  const handleUpload = () => {
    const formData = new FormData();
    fileList.forEach((file) => {
      formData.append('files[]', file as RcFile);
    });
    setUploading(true);
    // You can use any AJAX library you like
    fetch('https://www.mocky.io/v2/5cc8019d300000980a055e76', {
      method: 'POST',
      body: formData,
    })
      .then((res) => res.json())
      .then(() => {
        setFileList([]);
        message.success('upload successfully.');
      })
      .catch(() => {
        message.error('upload failed.');
      })
      .finally(() => {
        setUploading(false);
      });
  };

  const props: UploadProps = {
    onRemove: (file) => {
      const index = fileList.indexOf(file);
      const newFileList = fileList.slice();
      newFileList.splice(index, 1);
      setFileList(newFileList);
    },
    beforeUpload: (file) => {
      setFileList([...fileList, file]);

      return false;
    },
    fileList,
  };

  return (
    <>
      <Upload {...props}>
        <Button icon={<UploadOutlined />}>Select File</Button>
      </Upload>
      <Button
        type="primary"
        onClick={handleUpload}
        disabled={fileList.length === 0}
        loading={uploading}
        style={{ marginTop: 16 }}
      >
        {uploading ? 'Uploading' : 'Start Upload'}
      </Button>
    </>
  );
};

export default App;



import React from 'react';
import { AntDesignOutlined, UserOutlined } from '@ant-design/icons';
import { Avatar, Divider, Tooltip } from 'antd';

const App: React.FC = () => (
  <>
    <Avatar.Group>
      <Avatar src="https://joeschmoe.io/api/v1/random" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="Ant User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon={<AntDesignOutlined />} />
    </Avatar.Group>
    <Divider />
    <Avatar.Group maxCount={2} maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>
      <Avatar src="https://joeschmoe.io/api/v1/random" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="Ant User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon={<AntDesignOutlined />} />
    </Avatar.Group>
    <Divider />
    <Avatar.Group
      maxCount={2}
      size="large"
      maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}
    >
      <Avatar src="https://joeschmoe.io/api/v1/random" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="Ant User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon={<AntDesignOutlined />} />
    </Avatar.Group>
    <Divider />
    <Avatar.Group
      maxCount={2}
      maxPopoverTrigger="click"
      size="large"
      maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf', cursor: 'pointer' }}
    >
      <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />
      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>
      <Tooltip title="Ant User" placement="top">
        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
      </Tooltip>
      <Avatar style={{ backgroundColor: '#1890ff' }} icon={<AntDesignOutlined />} />
    </Avatar.Group>
  </>
);

export default App;



import React, { useState } from 'react';
import { MinusOutlined, PlusOutlined, QuestionOutlined } from '@ant-design/icons';
import { Avatar, Badge, Button, Switch, Space } from 'antd';

const ButtonGroup = Button.Group;

const App: React.FC = () => {
  const [count, setCount] = useState(5);
  const [show, setShow] = useState(true);

  const increase = () => {
    setCount(count + 1);
  };

  const decline = () => {
    let newCount = count - 1;
    if (newCount < 0) {
      newCount = 0;
    }
    setCount(newCount);
  };

  const random = () => {
    const newCount = Math.floor(Math.random() * 100);
    setCount(newCount);
  };

  const onChange = (checked: boolean) => {
    setShow(checked);
  };

  return (
    <Space direction="vertical">
      <Space size="large">
        <Badge count={count}>
          <Avatar shape="square" size="large" />
        </Badge>
        <ButtonGroup>
          <Button onClick={decline} icon={<MinusOutlined />} />
          <Button onClick={increase} icon={<PlusOutlined />} />
          <Button onClick={random} icon={<QuestionOutlined />} />
        </ButtonGroup>
      </Space>
      <Space size="large">
        <Badge dot={show}>
          <Avatar shape="square" size="large" />
        </Badge>
        <Switch onChange={onChange} checked={show} />
      </Space>
    </Space>
  );
};

export default App;



import React from 'react';
import { NotificationOutlined } from '@ant-design/icons';
import { Badge, Space } from 'antd';

const App: React.FC = () => (
  <Space>
    <Badge dot>
      <NotificationOutlined style={{ fontSize: 16 }} />
    </Badge>
    <Badge dot>
      <a href="#">Link something</a>
    </Badge>
  </Space>
);

export default App;



import React, { useState } from 'react';
import { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';
import { Avatar, Card, Skeleton, Switch } from 'antd';

const { Meta } = Card;

const App: React.FC = () => {
  const [loading, setLoading] = useState(true);

  const onChange = (checked: boolean) => {
    setLoading(!checked);
  };

  return (
    <>
      <Switch checked={!loading} onChange={onChange} />

      <Card style={{ width: 300, marginTop: 16 }} loading={loading}>
        <Meta
          avatar={<Avatar src="https://joeschmoe.io/api/v1/random" />}
          title="Card title"
          description="This is the description"
        />
      </Card>

      <Card
        style={{ width: 300, marginTop: 16 }}
        actions={[
          <SettingOutlined key="setting" />,
          <EditOutlined key="edit" />,
          <EllipsisOutlined key="ellipsis" />,
        ]}
      >
        <Skeleton loading={loading} avatar active>
          <Meta
            avatar={<Avatar src="https://joeschmoe.io/api/v1/random" />}
            title="Card title"
            description="This is the description"
          />
        </Skeleton>
      </Card>
    </>
  );
};

export default App;



import React from 'react';
import { Empty } from 'antd';

const App: React.FC = () => <Empty />;

export default App;


import React from 'react';
import { Empty } from 'antd';

const App: React.FC = () => <Empty />;

export default App;



import React from 'react';
import { QRCode, Space } from 'antd';

const App: React.FC = () => (
  <Space wrap>
    <QRCode value="https://ant.design/" status="loading" />
    <QRCode value="https://ant.design/" status="expired" onRefresh={() => console.log('refresh')} />
  </Space>
);

export default App;


import React, { useState } from 'react';
import { MinusOutlined, PlusOutlined } from '@ant-design/icons';
import { QRCode, Button } from 'antd';

const App: React.FC = () => {
  const [size, setSize] = useState<number>(160);

  const increase = () => {
    setSize((prevSize) => {
      const newSize = prevSize + 10;
      if (newSize > 300) {
        return 300;
      }
      return newSize;
    });
  };

  const decline = () => {
    setSize((prevSize) => {
      const newSize = prevSize - 10;
      if (newSize < 48) {
        return 48;
      }
      return newSize;
    });
  };

  return (
    <>
      <Button.Group style={{ marginBottom: 16 }}>
        <Button onClick={decline} disabled={size <= 48} icon={<MinusOutlined />}>
          Smaller
        </Button>
        <Button onClick={increase} disabled={size >= 300} icon={<PlusOutlined />}>
          Larger
        </Button>
      </Button.Group>
      <QRCode
        errorLevel="H"
        size={size}
        iconSize={size / 4}
        value="https://ant.design/"
        icon="https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg"
      />
    </>
  );
};

export default App;



import React, { useState } from 'react';
import { MinusOutlined, PlusOutlined } from '@ant-design/icons';
import { QRCode, Button } from 'antd';

const App: React.FC = () => {
  const [size, setSize] = useState<number>(160);

  const increase = () => {
    setSize((prevSize) => {
      const newSize = prevSize + 10;
      if (newSize > 300) {
        return 300;
      }
      return newSize;
    });
  };

  const decline = () => {
    setSize((prevSize) => {
      const newSize = prevSize - 10;
      if (newSize < 48) {
        return 48;
      }
      return newSize;
    });
  };

  return (
    <>
      <Button.Group style={{ marginBottom: 16 }}>
        <Button onClick={decline} disabled={size <= 48} icon={<MinusOutlined />}>
          Smaller
        </Button>
        <Button onClick={increase} disabled={size >= 300} icon={<PlusOutlined />}>
          Larger
        </Button>
      </Button.Group>
      <QRCode
        errorLevel="H"
        size={size}
        iconSize={size / 4}
        value="https://ant.design/"
        icon="https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg"
      />
    </>
  );
};

export default App;


import React, { useState } from 'react';
import { MinusOutlined, PlusOutlined } from '@ant-design/icons';
import { QRCode, Button } from 'antd';

const App: React.FC = () => {
  const [size, setSize] = useState<number>(160);

  const increase = () => {
    setSize((prevSize) => {
      const newSize = prevSize + 10;
      if (newSize > 300) {
        return 300;
      }
      return newSize;
    });
  };

  const decline = () => {
    setSize((prevSize) => {
      const newSize = prevSize - 10;
      if (newSize < 48) {
        return 48;
      }
      return newSize;
    });
  };

  return (
    <>
      <Button.Group style={{ marginBottom: 16 }}>
        <Button onClick={decline} disabled={size <= 48} icon={<MinusOutlined />}>
          Smaller
        </Button>
        <Button onClick={increase} disabled={size >= 300} icon={<PlusOutlined />}>
          Larger
        </Button>
      </Button.Group>
      <QRCode
        errorLevel="H"
        size={size}
        iconSize={size / 4}
        value="https://ant.design/"
        icon="https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg"
      />
    </>
  );
};

export default App;


import React from 'react';
import { Segmented } from 'antd';

export default () => (
  <>
    <Segmented size="large" options={['Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly']} />
    <br />
    <Segmented options={['Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly']} />
    <br />
    <Segmented size="small" options={['Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly']} />
  </>
);









import React from 'react';
import { ArrowDownOutlined, ArrowUpOutlined } from '@ant-design/icons';
import { Card, Col, Row, Statistic } from 'antd';

const App: React.FC = () => (
  <div className="site-statistic-demo-card">
    <Row gutter={16}>
      <Col span={12}>
        <Card>
          <Statistic
            title="Active"
            value={11.28}
            precision={2}
            valueStyle={{ color: '#3f8600' }}
            prefix={<ArrowUpOutlined />}
            suffix="%"
          />
        </Card>
      </Col>
      <Col span={12}>
        <Card>
          <Statistic
            title="Idle"
            value={9.3}
            precision={2}
            valueStyle={{ color: '#cf1322' }}
            prefix={<ArrowDownOutlined />}
            suffix="%"
          />
        </Card>
      </Col>
    </Row>
  </div>
);

export default App;









import React from 'react';
import { Col, Row, Statistic } from 'antd';
import type { countdownValueType } from 'antd/es/statistic/utils';

const { Countdown } = Statistic;
const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30; // Dayjs is also OK

const App: React.FC = () => {
  const onFinish = () => {
    console.log('finished!');
  };

  const onChange = (val: countdownValueType) => {
    if (4.95 * 1000 < val && val < 5 * 1000) {
      console.log('changed!');
    }
  };

  return (
    <Row gutter={16}>
      <Col span={12}>
        <Countdown title="Countdown" value={deadline} onFinish={onFinish} />
      </Col>
      <Col span={12}>
        <Countdown title="Million Seconds" value={deadline} format="HH:mm:ss:SSS" />
      </Col>
      <Col span={24} style={{ marginTop: 32 }}>
        <Countdown title="Day Level" value={deadline} format="D 天 H 时 m 分 s 秒" />
      </Col>
      <Col span={12}>
        <Countdown title="Countdown" value={Date.now() + 10 * 1000} onChange={onChange} />
      </Col>
    </Row>
  );
};

export default App;








import React from 'react';
import { Button, Col, Row, Statistic } from 'antd';

const App: React.FC = () => (
  <Row gutter={16}>
    <Col span={12}>
      <Statistic title="Active Users" value={112893} />
    </Col>
    <Col span={12}>
      <Statistic title="Account Balance (CNY)" value={112893} precision={2} />
      <Button style={{ marginTop: 16 }} type="primary">
        Recharge
      </Button>
    </Col>
    <Col span={12}>
      <Statistic title="Active Users" value={112893} loading />
    </Col>
  </Row>
);

export default App;










import React, { useState } from 'react';
import { Button, Table } from 'antd';
import type { ColumnsType } from 'antd/es/table';

interface DataType {
  key: React.Key;
  name: string;
  age: number;
  address: string;
}

const columns: ColumnsType<DataType> = [
  {
    title: 'Name',
    dataIndex: 'name',
  },
  {
    title: 'Age',
    dataIndex: 'age',
  },
  {
    title: 'Address',
    dataIndex: 'address',
  },
];

const data: DataType[] = [];
for (let i = 0; i < 46; i++) {
  data.push({
    key: i,
    name: `Edward King ${i}`,
    age: 32,
    address: `London, Park Lane no. ${i}`,
  });
}

const App: React.FC = () => {
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [loading, setLoading] = useState(false);

  const start = () => {
    setLoading(true);
    // ajax request after empty completing
    setTimeout(() => {
      setSelectedRowKeys([]);
      setLoading(false);
    }, 1000);
  };

  const onSelectChange = (newSelectedRowKeys: React.Key[]) => {
    console.log('selectedRowKeys changed: ', newSelectedRowKeys);
    setSelectedRowKeys(newSelectedRowKeys);
  };

  const rowSelection = {
    selectedRowKeys,
    onChange: onSelectChange,
  };
  const hasSelected = selectedRowKeys.length > 0;

  return (
    <div>
      <div style={{ marginBottom: 16 }}>
        <Button type="primary" onClick={start} disabled={!hasSelected} loading={loading}>
          Reload
        </Button>
        <span style={{ marginLeft: 8 }}>
          {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}
        </span>
      </div>
      <Table rowSelection={rowSelection} columns={columns} dataSource={data} />
    </div>
  );
};

export default App;


import React, { useState } from 'react';
import type { RadioChangeEvent } from 'antd';
import { Radio, Tabs } from 'antd';
import type { SizeType } from 'antd/es/config-provider/SizeContext';

const App: React.FC = () => {
  const [size, setSize] = useState<SizeType>('small');

  const onChange = (e: RadioChangeEvent) => {
    setSize(e.target.value);
  };

  return (
    <div>
      <Radio.Group value={size} onChange={onChange} style={{ marginBottom: 16 }}>
        <Radio.Button value="small">Small</Radio.Button>
        <Radio.Button value="middle">Middle</Radio.Button>
        <Radio.Button value="large">Large</Radio.Button>
      </Radio.Group>
      <Tabs
        defaultActiveKey="1"
        size={size}
        style={{ marginBottom: 32 }}
        items={new Array(3).fill(null).map((_, i) => {
          const id = String(i + 1);
          return {
            label: `Tab ${id}`,
            key: id,
            children: `Content of tab ${id}`,
          };
        })}
      />
      <Tabs
        defaultActiveKey="1"
        type="card"
        size={size}
        items={new Array(3).fill(null).map((_, i) => {
          const id = String(i + 1);
          return {
            label: `Card Tab ${id}`,
            key: id,
            children: `Content of card tab ${id}`,
          };
        })}
      />
    </div>
  );
};

export default App;







import React, { useState } from 'react';
import type { RadioChangeEvent } from 'antd';
import { Radio, Space, Tabs } from 'antd';

type TabPosition = 'left' | 'right' | 'top' | 'bottom';

const App: React.FC = () => {
  const [tabPosition, setTabPosition] = useState<TabPosition>('left');

  const changeTabPosition = (e: RadioChangeEvent) => {
    setTabPosition(e.target.value);
  };

  return (
    <>
      <Space style={{ marginBottom: 24 }}>
        Tab position:
        <Radio.Group value={tabPosition} onChange={changeTabPosition}>
          <Radio.Button value="top">top</Radio.Button>
          <Radio.Button value="bottom">bottom</Radio.Button>
          <Radio.Button value="left">left</Radio.Button>
          <Radio.Button value="right">right</Radio.Button>
        </Radio.Group>
      </Space>
      <Tabs
        tabPosition={tabPosition}
        items={new Array(3).fill(null).map((_, i) => {
          const id = String(i + 1);
          return {
            label: `Tab ${id}`,
            key: id,
            children: `Content of Tab ${id}`,
          };
        })}
      />
    </>
  );
};

export default App;

////All maltipall 
import React, { useRef, useState } from 'react';
import { Tabs } from 'antd';

const initialItems = [
  { label: 'Tab 1', children: 'Content of Tab 1', key: '1' },
  { label: 'Tab 2', children: 'Content of Tab 2', key: '2' },
  {
    label: 'Tab 3',
    children: 'Content of Tab 3',
    key: '3',
    closable: false,
  },
];

const App: React.FC = () => {
  const [activeKey, setActiveKey] = useState(initialItems[0].key);
  const [items, setItems] = useState(initialItems);
  const newTabIndex = useRef(0);

  const onChange = (newActiveKey: string) => {
    setActiveKey(newActiveKey);
  };

  const add = () => {
    const newActiveKey = `newTab${newTabIndex.current++}`;
    const newPanes = [...items];
    newPanes.push({ label: 'New Tab', children: 'Content of new Tab', key: newActiveKey });
    setItems(newPanes);
    setActiveKey(newActiveKey);
  };

  const remove = (targetKey: string) => {
    let newActiveKey = activeKey;
    let lastIndex = -1;
    items.forEach((item, i) => {
      if (item.key === targetKey) {
        lastIndex = i - 1;
      }
    });
    const newPanes = items.filter((item) => item.key !== targetKey);
    if (newPanes.length && newActiveKey === targetKey) {
      if (lastIndex >= 0) {
        newActiveKey = newPanes[lastIndex].key;
      } else {
        newActiveKey = newPanes[0].key;
      }
    }
    setItems(newPanes);
    setActiveKey(newActiveKey);
  };

  const onEdit = (targetKey: string, action: 'add' | 'remove') => {
    if (action === 'add') {
      add();
    } else {
      remove(targetKey);
    }
  };

  return (
    <Tabs
      type="editable-card"
      onChange={onChange}
      activeKey={activeKey}
      onEdit={onEdit}
      items={items}
    />
  );
};

export default App;


import React, { useState } from 'react';
import { Button, Timeline } from 'antd';

const App: React.FC = () => {
  const [reverse, setReverse] = useState(false);

  const handleClick = () => {
    setReverse(!reverse);
  };

  return (
    <div>
      <Timeline pending="Recording..." reverse={reverse}>
        <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>
        <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>
        <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>
      </Timeline>
      <Button type="primary" style={{ marginTop: 16 }} onClick={handleClick}>
        Toggle Reverse
      </Button>
    </div>
  );
};

export default App;








import React from 'react';
import { Button, Tooltip } from 'antd';

const text = <span>prompt text</span>;

const buttonWidth = 70;

const App: React.FC = () => (
  <div className="demo">
    <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }}>
      <Tooltip placement="topLeft" title={text}>
        <Button>TL</Button>
      </Tooltip>
      <Tooltip placement="top" title={text}>
        <Button>Top</Button>
      </Tooltip>
      <Tooltip placement="topRight" title={text}>
        <Button>TR</Button>
      </Tooltip>
    </div>
    <div style={{ width: buttonWidth, float: 'left' }}>
      <Tooltip placement="leftTop" title={text}>
        <Button>LT</Button>
      </Tooltip>
      <Tooltip placement="left" title={text}>
        <Button>Left</Button>
      </Tooltip>
      <Tooltip placement="leftBottom" title={text}>
        <Button>LB</Button>
      </Tooltip>
    </div>
    <div style={{ width: buttonWidth, marginLeft: buttonWidth * 4 + 24 }}>
      <Tooltip placement="rightTop" title={text}>
        <Button>RT</Button>
      </Tooltip>
      <Tooltip placement="right" title={text}>
        <Button>Right</Button>
      </Tooltip>
      <Tooltip placement="rightBottom" title={text}>
        <Button>RB</Button>
      </Tooltip>
    </div>
    <div style={{ marginLeft: buttonWidth, clear: 'both', whiteSpace: 'nowrap' }}>
      <Tooltip placement="bottomLeft" title={text}>
        <Button>BL</Button>
      </Tooltip>
      <Tooltip placement="bottom" title={text}>
        <Button>Bottom</Button>
      </Tooltip>
      <Tooltip placement="bottomRight" title={text}>
        <Button>BR</Button>
      </Tooltip>
    </div>
  </div>
);

export default App;




import React, { useRef, useState } from 'react';
import { Button, Divider, Space, Tour } from 'antd';
import type { TourProps } from 'antd';
import { EllipsisOutlined } from '@ant-design/icons';

const App: React.FC = () => {
  const ref1 = useRef(null);
  const ref2 = useRef(null);
  const ref3 = useRef(null);

  const [open, setOpen] = useState<boolean>(false);

  const steps: TourProps['steps'] = [
    {
      title: 'Upload File',
      description: 'Put your files here.',
      cover: (
        <img
          alt="tour.png"
          src="https://user-images.githubusercontent.com/5378891/197385811-55df8480-7ff4-44bd-9d43-a7dade598d70.png"
        />
      ),
      target: () => ref1.current,
    },
    {
      title: 'Save',
      description: 'Save your changes.',
      target: () => ref2.current,
    },
    {
      title: 'Other Actions',
      description: 'Click to see other actions.',
      target: () => ref3.current,
    },
  ];

  return (
    <>
      <Button type="primary" onClick={() => setOpen(true)}>
        Begin Tour
      </Button>

      <Divider />

      <Space>
        <Button ref={ref1}> Upload</Button>
        <Button ref={ref2} type="primary">
          Save
        </Button>
        <Button ref={ref3} icon={<EllipsisOutlined />} />
      </Space>

      <Tour open={open} onClose={() => setOpen(false)} steps={steps} />
    </>
  );
};

export default App;







import React from 'react';
import { Tree } from 'antd';
import type { DataNode, DirectoryTreeProps } from 'antd/es/tree';

const { DirectoryTree } = Tree;

const treeData: DataNode[] = [
  {
    title: 'parent 0',
    key: '0-0',
    children: [
      { title: 'leaf 0-0', key: '0-0-0', isLeaf: true },
      { title: 'leaf 0-1', key: '0-0-1', isLeaf: true },
    ],
  },
  {
    title: 'parent 1',
    key: '0-1',
    children: [
      { title: 'leaf 1-0', key: '0-1-0', isLeaf: true },
      { title: 'leaf 1-1', key: '0-1-1', isLeaf: true },
    ],
  },
];

const App: React.FC = () => {
  const onSelect: DirectoryTreeProps['onSelect'] = (keys, info) => {
    console.log('Trigger Select', keys, info);
  };

  const onExpand: DirectoryTreeProps['onExpand'] = (keys, info) => {
    console.log('Trigger Expand', keys, info);
  };

  return (
    <DirectoryTree
      multiple
      defaultExpandAll
      onSelect={onSelect}
      onExpand={onExpand}
      treeData={treeData}
    />
  );
};

export default App;







import React, { useState } from 'react';
import { Button, Drawer, Space } from 'antd';
import type { DrawerProps } from 'antd/es/drawer';

const App: React.FC = () => {
  const [open, setOpen] = useState(false);
  const [size, setSize] = useState<DrawerProps['size']>();

  const showDefaultDrawer = () => {
    setSize('default');
    setOpen(true);
  };

  const showLargeDrawer = () => {
    setSize('large');
    setOpen(true);
  };

  const onClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Space>
        <Button type="primary" onClick={showDefaultDrawer}>
          Open Default Size (378px)
        </Button>
        <Button type="primary" onClick={showLargeDrawer}>
          Open Large Size (736px)
        </Button>
      </Space>
      <Drawer
        title={`${size} Drawer`}
        placement="right"
        size={size}
        onClose={onClose}
        open={open}
        extra={
          <Space>
            <Button onClick={onClose}>Cancel</Button>
            <Button type="primary" onClick={onClose}>
              OK
            </Button>
          </Space>
        }
      >
        <p>Some contents...</p>
        <p>Some contents...</p>
        <p>Some contents...</p>
      </Drawer>
    </>
  );
};

export default App;



import React from 'react';
import { Button, message, Space } from 'antd';

const App: React.FC = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const success = () => {
    messageApi.open({
      type: 'success',
      content: 'This is a success message',
    });
  };

  const error = () => {
    messageApi.open({
      type: 'error',
      content: 'This is an error message',
    });
  };

  const warning = () => {
    messageApi.open({
      type: 'warning',
      content: 'This is a warning message',
    });
  };

  return (
    <>
      {contextHolder}
      <Space>
        <Button onClick={success}>Success</Button>
        <Button onClick={error}>Error</Button>
        <Button onClick={warning}>Warning</Button>
      </Space>
    </>
  );
};

export default App;


import React from 'react';
import { Button, message } from 'antd';

const App: React.FC = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const success = () => {
    messageApi.open({
      type: 'success',
      content: 'This is a prompt message for success, and it will disappear in 10 seconds',
      duration: 10,
    });
  };

  return (
    <>
      {contextHolder}
      <Button onClick={success}>Customized display duration</Button>
    </>
  );
};

export default App;


import React from 'react';
import { Button, message } from 'antd';

const App: React.FC = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const success = () => {
    messageApi
      .open({
        type: 'loading',
        content: 'Action in progress..',
        duration: 2.5,
      })
      .then(() => message.success('Loading finished', 2.5))
      .then(() => message.info('Loading finished', 2.5));
  };

  return (
    <>
      {contextHolder}
      <Button onClick={success}>Display sequential messages</Button>
    </>
  );
};

export default App;


import React from 'react';
import { Button, message } from 'antd';

const App: React.FC = () => {
  const [messageApi, contextHolder] = message.useMessage();
  const key = 'updatable';

  const openMessage = () => {
    messageApi.open({
      key,
      type: 'loading',
      content: 'Loading...',
    });
    setTimeout(() => {
      messageApi.open({
        key,
        type: 'success',
        content: 'Loaded!',
        duration: 2,
      });
    }, 1000);
  };

  return (
    <>
      {contextHolder}
      <Button type="primary" onClick={openMessage}>
        Open the message box
      </Button>
    </>
  );
};

export default App;


import React from 'react';
import { Button, message, Space } from 'antd';

const App: React.FC = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const success = () => {
    messageApi.open({
      type: 'success',
      content: 'This is a success message',
    });
  };

  const error = () => {
    messageApi.open({
      type: 'error',
      content: 'This is an error message',
    });
  };

  const warning = () => {
    messageApi.open({
      type: 'warning',
      content: 'This is a warning message',
    });
  };

  return (
    <>
      {contextHolder}
      <Space>
        <Button onClick={success}>Success</Button>
        <Button onClick={error}>Error</Button>
        <Button onClick={warning}>Warning</Button>
      </Space>
    </>
  );
};

export default App;







import React from 'react';
import { ExclamationCircleFilled } from '@ant-design/icons';
import { Button, Modal, Space } from 'antd';

const { confirm } = Modal;

const showConfirm = () => {
  confirm({
    title: 'Do you Want to delete these items?',
    icon: <ExclamationCircleFilled />,
    content: 'Some descriptions',
    onOk() {
      console.log('OK');
    },
    onCancel() {
      console.log('Cancel');
    },
  });
};

const showPromiseConfirm = () => {
  confirm({
    title: 'Do you want to delete these items?',
    icon: <ExclamationCircleFilled />,
    content: 'When clicked the OK button, this dialog will be closed after 1 second',
    onOk() {
      return new Promise((resolve, reject) => {
        setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);
      }).catch(() => console.log('Oops errors!'));
    },
    onCancel() {},
  });
};

const showDeleteConfirm = () => {
  confirm({
    title: 'Are you sure delete this task?',
    icon: <ExclamationCircleFilled />,
    content: 'Some descriptions',
    okText: 'Yes',
    okType: 'danger',
    cancelText: 'No',
    onOk() {
      console.log('OK');
    },
    onCancel() {
      console.log('Cancel');
    },
  });
};

const showPropsConfirm = () => {
  confirm({
    title: 'Are you sure delete this task?',
    icon: <ExclamationCircleFilled />,
    content: 'Some descriptions',
    okText: 'Yes',
    okType: 'danger',
    okButtonProps: {
      disabled: true,
    },
    cancelText: 'No',
    onOk() {
      console.log('OK');
    },
    onCancel() {
      console.log('Cancel');
    },
  });
};

const App: React.FC = () => (
  <Space wrap>
    <Button onClick={showConfirm}>Confirm</Button>
    <Button onClick={showPromiseConfirm}>With promise</Button>
    <Button onClick={showDeleteConfirm} type="dashed">
      Delete
    </Button>
    <Button onClick={showPropsConfirm} type="dashed">
      With extra props
    </Button>
  </Space>
);

export default App;


import React, { useMemo } from 'react';
import {
  RadiusBottomleftOutlined,
  RadiusBottomrightOutlined,
  RadiusUpleftOutlined,
  RadiusUprightOutlined,
} from '@ant-design/icons';
import { Button, Divider, notification, Space } from 'antd';
import type { NotificationPlacement } from 'antd/es/notification/interface';

const Context = React.createContext({ name: 'Default' });

const App: React.FC = () => {
  const [api, contextHolder] = notification.useNotification();

  const openNotification = (placement: NotificationPlacement) => {
    api.info({
      message: `Notification ${placement}`,
      description: <Context.Consumer>{({ name }) => `Hello, ${name}!`}</Context.Consumer>,
      placement,
    });
  };

  const contextValue = useMemo(() => ({ name: 'Ant Design' }), []);

  return (
    <Context.Provider value={contextValue}>
      {contextHolder}
      <Space>
        <Button type="primary" onClick={() => openNotification('topLeft')}>
          <RadiusUpleftOutlined />
          topLeft
        </Button>
        <Button type="primary" onClick={() => openNotification('topRight')}>
          <RadiusUprightOutlined />
          topRight
        </Button>
      </Space>
      <Divider />
      <Space>
        <Button type="primary" onClick={() => openNotification('bottomLeft')}>
          <RadiusBottomleftOutlined />
          bottomLeft
        </Button>
        <Button type="primary" onClick={() => openNotification('bottomRight')}>
          <RadiusBottomrightOutlined />
          bottomRight
        </Button>
      </Space>
    </Context.Provider>
  );
};

export default App;



import React from 'react';
import { Button, Popconfirm } from 'antd';

const App: React.FC = () => {
  const confirm = () =>
    new Promise((resolve) => {
      setTimeout(() => resolve(null), 3000);
    });

  return (
    <Popconfirm
      title="Title"
      description="Open Popconfirm with Promise"
      onConfirm={confirm}
      onOpenChange={() => console.log('open change')}
    >
      <Button type="primary">Open Popconfirm with Promise</Button>
    </Popconfirm>
  );
};

export default App;











import React, { useState } from 'react';
import type Icon from '@ant-design/icons';
import { LikeOutlined, MessageOutlined, StarOutlined } from '@ant-design/icons';
import { Avatar, List, Skeleton, Switch } from 'antd';

interface IconTextProps {
  icon: typeof Icon;
  text: React.ReactNode;
}

const listData = Array.from({ length: 3 }).map((_, i) => ({
  href: 'https://ant.design',
  title: `ant design part ${i}`,
  avatar: 'https://joeschmoe.io/api/v1/random',
  description:
    'Ant Design, a design language for background applications, is refined by Ant UED Team.',
  content:
    'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.',
}));

const IconText = ({ icon, text }: IconTextProps) => (
  <span>
    {React.createElement(icon, { style: { marginRight: 8 } })}
    {text}
  </span>
);

const App: React.FC = () => {
  const [loading, setLoading] = useState(true);

  const onChange = (checked: boolean) => {
    setLoading(!checked);
  };
  return (
    <>
      <Switch checked={!loading} onChange={onChange} />

      <List
        itemLayout="vertical"
        size="large"
        dataSource={listData}
        renderItem={(item) => (
          <List.Item
            key={item.title}
            actions={
              !loading
                ? [
                    <IconText icon={StarOutlined} text="156" key="list-vertical-star-o" />,
                    <IconText icon={LikeOutlined} text="156" key="list-vertical-like-o" />,
                    <IconText icon={MessageOutlined} text="2" key="list-vertical-message" />,
                  ]
                : undefined
            }
            extra={
              !loading && (
                <img
                  width={272}
                  alt="logo"
                  src="https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png"
                />
              )
            }
          >
            <Skeleton loading={loading} active avatar>
              <List.Item.Meta
                avatar={<Avatar src={item.avatar} />}
                title={<a href={item.href}>{item.title}</a>}
                description={item.description}
              />
              {item.content}
            </Skeleton>
          </List.Item>
        )}
      />
    </>
  );
};

export default App;



import React from 'react';
import { FloatButton } from 'antd';
import { CustomerServiceOutlined, CommentOutlined } from '@ant-design/icons';

const App: React.FC = () => (
  <>
    <FloatButton.Group
      trigger="click"
      type="primary"
      style={{ right: 24 }}
      icon={<CustomerServiceOutlined />}
    >
      <FloatButton />
      <FloatButton icon={<CommentOutlined />} />
    </FloatButton.Group>
    <FloatButton.Group
      trigger="hover"
      type="primary"
      style={{ right: 94 }}
      icon={<CustomerServiceOutlined />}
    >
      <FloatButton />
      <FloatButton icon={<CommentOutlined />} />
    </FloatButton.Group>
  </>
);

export default App;
